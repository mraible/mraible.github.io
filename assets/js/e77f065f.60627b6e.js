"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[2955],{43985:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=t(74848),o=t(28453);const a={title:"JHipster v7 upgrade tips",slug:"/tips/033_tip_v7_upgrade.html",last_update:{date:new Date("2020-12-19T08:30:00.000Z")}},s="JHipster v7 upgrade tips",r={id:"tips/tip_v7_upgrade",title:"JHipster v7 upgrade tips",description:"Tip submitted by @kaidohallik",source:"@site/docs/tips/033_tip_v7_upgrade.mdx",sourceDirName:"tips",slug:"/tips/033_tip_v7_upgrade.html",permalink:"/tips/033_tip_v7_upgrade.html",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/tips/033_tip_v7_upgrade.mdx",tags:[],version:"current",lastUpdatedAt:16083666e5,sidebarPosition:33,frontMatter:{title:"JHipster v7 upgrade tips",slug:"/tips/033_tip_v7_upgrade.html",last_update:{date:"2020-12-19T08:30:00.000Z"}}},l={},c=[{value:"<strong>Prettier for HTML</strong>",id:"prettier-for-html",level:2},{value:"<strong>Translation directive change in Angular client</strong>",id:"translation-directive-change-in-angular-client",level:2},{value:"<strong>Files renamed in Angular client</strong>",id:"files-renamed-in-angular-client",level:2},{value:"Helper node script for moving entity files",id:"helper-node-script-for-moving-entity-files",level:3},{value:"Helper node script for moving main files",id:"helper-node-script-for-moving-main-files",level:3},{value:"Helper script to copy tests next to files they test",id:"helper-script-to-copy-tests-next-to-files-they-test",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"jhipster-v7-upgrade-tips",children:"JHipster v7 upgrade tips"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Tip submitted by ",(0,i.jsx)(n.a,{href:"https://github.com/kaidohallik",children:"@kaidohallik"})]})}),"\n",(0,i.jsx)(n.h2,{id:"prettier-for-html",children:(0,i.jsx)(n.strong,{children:"Prettier for HTML"})}),"\n",(0,i.jsx)(n.p,{children:"We have enabled Prettier for HTML. You can run Prettier with html enabled before upgrading and commit changes to Git to see real changes in HTML files after upgrade."}),"\n",(0,i.jsx)(n.h2,{id:"translation-directive-change-in-angular-client",children:(0,i.jsx)(n.strong,{children:"Translation directive change in Angular client"})}),"\n",(0,i.jsxs)(n.p,{children:["We have moved ",(0,i.jsx)(n.code,{children:"jhiTranslate"})," directive from ",(0,i.jsx)(n.a,{href:"https://github.com/jhipster/ng-jhipster/blob/main/src/language/jhi-translate.directive.ts",children:"ng-jhipster"})," to generated application. If you have different ",(0,i.jsx)(n.code,{children:"jhiPrefix"})," than ",(0,i.jsx)(n.code,{children:"jhi"})," then you may want to replace all ",(0,i.jsx)(n.code,{children:"jhiTranslate"})," with ",(0,i.jsx)(n.code,{children:"yourprefixTranslate"})," and commit changes to Git before upgrade to reduce changes shown after upgrade."]}),"\n",(0,i.jsx)(n.h2,{id:"files-renamed-in-angular-client",children:(0,i.jsx)(n.strong,{children:"Files renamed in Angular client"})}),"\n",(0,i.jsx)(n.p,{children:"In Angular client a lot of files renamed and tests moved next to files they are testing."}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.a,{href:"/upgrading-an-application/#option-2---manual-upgrade",children:"manual upgrade"})," instructions page is section ",(0,i.jsx)(n.strong,{children:"Hints about renamed files"})," - this can help in upgrading."]}),"\n",(0,i.jsx)(n.p,{children:"If the previous hint did not give a satisfactory result then you can do before upgrade:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"move renamed files to their final location"}),"\n",(0,i.jsx)(n.li,{children:"commit changes after that"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"helper-node-script-for-moving-entity-files",children:"Helper node script for moving entity files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-node",children:"const fs = require('fs');\nconst path = require('path');\n\nmoveEntityFilesToV7Location = function (appDir) {\n  const entityConfigDir = path.join(appDir, '.jhipster');\n  fs\n    .readdirSync(entityConfigDir)\n    .filter(fn => fn.endsWith('.json'))\n    .forEach(fn => {\n      console.log(`\\nProcessing ${fn}`);\n      const entity = JSON.parse(fs.readFileSync(path.join(entityConfigDir, fn), 'utf8'));\n      let entityFileName = kebabCase(entity.name);\n      const entityClientRootFolder = entity.clientRootFolder || '';\n      if (entity.angularJSSuffix) {\n        entityFileName = `${entityFileName}-${kebabCase(entity.angularJSSuffix)}`;\n      }\n      const entityFolder = path.join(appDir, 'src/main/webapp/app/entities', entityClientRootFolder, entityFileName);\n      const entityTestFolder = path.join(appDir, 'src/test/javascript/spec/app/entities', entityClientRootFolder, entityFileName);\n      const entityModelFolder = path.join(appDir, 'src/main/webapp/app/shared/model', entityClientRootFolder);\n      // move main files\n      renameFile(entityFolder, `${entityFileName}.component.ts`, 'list');\n      renameFile(entityFolder, `${entityFileName}.component.html`, 'list');\n      renameFile(entityFolder, `${entityFileName}-delete-dialog.component.ts`, 'delete');\n      renameFile(entityFolder, `${entityFileName}-delete-dialog.component.html`, 'delete');\n      renameFile(entityFolder, `${entityFileName}-detail.component.ts`, 'detail');\n      renameFile(entityFolder, `${entityFileName}-detail.component.html`, 'detail');\n      renameFile(entityFolder, `${entityFileName}-update.component.ts`, 'update');\n      renameFile(entityFolder, `${entityFileName}-update.component.html`, 'update');\n      renameFile(entityFolder, `${entityFileName}.service.ts`, 'service');\n      // route folder and file name both changed\n      renameFile(entityFolder, `${entityFileName}.route.ts`, 'route', undefined, `${entityFileName}-routing.module.ts`);\n      // model is moved from shared\n      renameFile(entityFolder, `${entityFileName}.model.ts`, '', entityModelFolder);\n      // move test files\n      renameFile(entityFolder, `${entityFileName}.component.spec.ts`, 'list', entityTestFolder);\n      renameFile(entityFolder, `${entityFileName}-delete-dialog.component.spec.ts`, 'delete', entityTestFolder);\n      renameFile(entityFolder, `${entityFileName}-detail.component.spec.ts`, 'detail', entityTestFolder);\n      renameFile(entityFolder, `${entityFileName}-update.component.spec.ts`, 'update', entityTestFolder);\n      renameFile(entityFolder, `${entityFileName}.service.spec.ts`, 'service', entityTestFolder);\n    });\n}\n\nrenameFile = function (entityFolder, fileName, destinationFolderName, entityFromFolder, newFileName) {\n  const oldFile = path.join(entityFromFolder || entityFolder, fileName);\n  if (fs.existsSync(oldFile)) {\n    const destinationFolder = path.join(entityFolder, destinationFolderName);\n    if (!fs.existsSync(destinationFolder)) {\n      console.log(`creating folder ${destinationFolder}`);\n      fs.mkdirSync(destinationFolder);\n    }\n    const newFile = path.join(destinationFolder, newFileName || fileName);\n    console.log(`moving ${oldFile} to ${newFile}`);\n    fs.renameSync(oldFile, newFile);\n  }\n}\n\nkebabCase = function (str) {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\n// change 'appPath' to your application path\nmoveEntityFilesToV7Location('appPath');\n\n// alternative usage with commandline parameter: node move-angular-entity-files-to-jhipster-v7-location.js appPath\n// const folder = process.argv[2];\n// console.log(`Processing folder ${folder}`);\n// moveEntityFilesToV7Location(folder);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"helper-node-script-for-moving-main-files",children:"Helper node script for moving main files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-node",children:"const fs = require('fs');\nconst path = require('path');\n\n// from test files only jest.conf is included in this files move script\nmoveMainFilesToV7Location = function (appDir) {\n  this.appDir = appDir;\n  renameFile('account/password/password-strength-bar.component.ts', 'account/password/password-strength-bar/password-strength-bar.component.ts');\n  renameFile('account/password/password-strength-bar.scss', 'account/password/password-strength-bar/password-strength-bar.component.scss');\n  renameFile('admin/docs/docs.scss', 'admin/docs/docs.component.scss');\n  renameFile('admin/health/health-modal.component.ts', 'admin/health/modal/health-modal.component.ts');\n  renameFile('admin/health/health-modal.component.html', 'admin/health/modal/health-modal.component.html');\n  renameFile('admin/user-management/user-management-delete-dialog.component.ts', 'admin/user-management/delete/user-management-delete-dialog.component.ts');\n  renameFile('admin/user-management/user-management-delete-dialog.component.html', 'admin/user-management/delete/user-management-delete-dialog.component.html');\n  renameFile('admin/user-management/user-management-detail.component.ts', 'admin/user-management/detail/user-management-detail.component.ts');\n  renameFile('admin/user-management/user-management-detail.component.html', 'admin/user-management/detail/user-management-detail.component.html');\n  renameFile('admin/user-management/user-management-update.component.ts', 'admin/user-management/update/user-management-update.component.ts');\n  renameFile('admin/user-management/user-management-update.component.html', 'admin/user-management/update/user-management-update.component.html');\n  renameFile('admin/user-management/user-management.component.ts', 'admin/user-management/list/user-management.component.ts');\n  renameFile('admin/user-management/user-management.component.html', 'admin/user-management/list/user-management.component.html');\n  renameFile('blocks/config/uib-pagination.config.ts', 'config/uib-pagination.config.ts');\n  renameFile('blocks/interceptor/auth-expired.interceptor.ts', 'core/interceptor/auth-expired.interceptor.ts');\n  renameFile('blocks/interceptor/auth.interceptor.ts', 'core/interceptor/auth.interceptor.ts');\n  renameFile('blocks/interceptor/errorhandler.interceptor.ts', 'core/interceptor/error-handler.interceptor.ts');\n  renameFile('blocks/interceptor/notification.interceptor.ts', 'core/interceptor/notification.interceptor.ts');\n  renameFile('core/auth/user-route-access-service.ts', 'core/auth/user-route-access.service.ts');\n  renameFile('core/icons/font-awesome-icons.ts', 'config/font-awesome-icons.ts');\n  renameFile('core/login/login.model.ts', 'login/login.model.ts');\n  renameFile('core/login/login.service.ts', 'login/login.service.ts');\n  renameFile('core/login/logout.model.ts', 'login/logout.model.ts');\n  renameFile('core/language/language.constants.ts', 'config/language.constants.ts');\n  renameFile('entities/entity.module.ts', 'entities/entity-routing.module.ts');\n  renameFile('home/home.scss', 'home/home.component.scss');\n  renameFile('layouts/navbar/navbar.scss', 'layouts/navbar/navbar.component.scss');\n  renameFile('layouts/profiles/page-ribbon.scss', 'layouts/profiles/page-ribbon.component.scss');\n  renameFile('shared/constants/authority.constants.ts', 'config/authority.constants.ts');\n  renameFile('shared/constants/error.constants.ts', 'config/error.constants.ts');\n  renameFile('shared/constants/input.constants.ts', 'config/input.constants.ts');\n  renameFile('shared/constants/pagination.constants.ts', 'config/pagination.constants.ts');\n  renameFile('shared/login/login.component.ts', 'login/login.component.ts');\n  renameFile('shared/login/login.component.html', 'login/login.component.html');\n  renameFile('shared/util/datepicker-adapter.ts', 'config/datepicker-adapter.ts');\n  renameFile('shared/util/request-util.ts', 'core/request/request-util.ts');\n  renameFile('app.main.ts', '../main.ts')\n  renameFile('polyfills.ts', '../polyfills.ts')\n  renameFile('../../../test/javascript/jest.conf.js', '../../../../jest.conf.js');\n\n  // if you are using version greater than 7.0.0-beta.0 (generator-jhipster main branch or newer release)\n  // then you may want to uncomment lines below\n  //renameFile('core/user/account.model.ts', 'core/auth/account.model.ts');\n  //renameFile('core/user/user.model.ts', 'entities/user/user.model.ts', true);\n  //renameFile('core/user/user.service.ts', 'entities/user/user.service.ts', true);\n  //renameFile('core/user/user.model.ts', 'admin/user-management/user-management.model.ts');\n  //renameFile('core/user/user.service.ts', 'admin/user-management/service/user-management.service.ts');\n}\n\nrenameFile = function (source, destination, copyOnly) {\n  const srcDir = 'src/main/webapp/app';\n  const oldFile = path.join(this.appDir, srcDir, source);\n  if (fs.existsSync(oldFile)) {\n    const newFile = path.join(this.appDir, srcDir, destination);\n    const destinationFolder = path.dirname(newFile);\n    if (!fs.existsSync(destinationFolder)) {\n      console.log(`creating folder ${destinationFolder}`);\n      fs.mkdirSync(destinationFolder);\n    }\n    if (copyOnly) {\n      console.log(`copying ${oldFile} to ${newFile}`);\n      fs.copyFileSync(oldFile, newFile);\n    } else {\n      console.log(`moving ${oldFile} to ${newFile}`);\n      fs.renameSync(oldFile, newFile);\n    }\n  }\n}\n\n// change 'appPath' to your application path\nmoveMainFilesToV7Location('appPath');\n\n// alternative usage with commandline parameter: node move-angular-main-files-to-jhipster-v7-location.js 'appPath'\n// const folder = process.argv[2];\n// console.log(`Processing folder ${folder}`);\n// moveMainFilesToV7Location(folder);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"helper-script-to-copy-tests-next-to-files-they-test",children:"Helper script to copy tests next to files they test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-node",children:"const fs = require('fs');\nconst path = require('path');\n\nmoveTestsNextToFilesTheyTest = function(appDir) {\n  copyFiles(path.join(appDir, 'src/test/javascript/spec/app'), path.join(appDir, 'src/main/webapp/app'));\n}\n\ncopyFiles = function(sourceDir, destinationDir) {\n  fs.readdirSync(sourceDir).forEach(function(file) {\n    const sourceFileWithPath = path.join(sourceDir, file);\n    const destinationFileWithPath = path.join(destinationDir, file);\n    if (fs.statSync(sourceFileWithPath).isDirectory()) {\n      copyFiles(sourceFileWithPath, destinationFileWithPath);\n    } else {\n      fs.copyFile(sourceFileWithPath, destinationFileWithPath, (err) => {\n        // if destination folder doesn't exist in sources folder then throw error\n        // those cases need to be handled manually\n        if (err) {\n          throw err;\n        }\n        console.log(`${sourceFileWithPath} was copied to ${destinationFileWithPath}`);\n      });\n    }\n  });\n};\n\n// change 'appPath' to your application path\nmoveTestsNextToFilesTheyTest('appPath');\n\n// alternative usage with commandline parameter: node move-tests-next-to-files-they-test.js appPath\n// const folder = process.argv[2];\n// console.log(`Processing folder ${folder}`);\n// moveTestsNextToFilesTheyTest(folder);\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);