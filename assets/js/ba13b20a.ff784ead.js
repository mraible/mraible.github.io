"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[8209],{92593:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var t=a(74848),o=a(28453);const i={title:"Code Quality",slug:"/code-quality/",last_update:{date:new Date("2018-08-18T12:40:00.000Z")}},s=void 0,r={id:"tests-and-qa/code-quality",title:"Code Quality",description:"Code quality can be analyzed using SonarCloud, which is automatically configured by JHipster.",source:"@site/docs/tests-and-qa/code-quality.mdx",sourceDirName:"tests-and-qa",slug:"/code-quality/",permalink:"/code-quality/",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/tests-and-qa/code-quality.mdx",tags:[],version:"current",lastUpdatedAt:1534596e6,frontMatter:{title:"Code Quality",slug:"/code-quality/",last_update:{date:"2018-08-18T12:40:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Running tests",permalink:"/running-tests/"},next:{title:"Dependency Vulnerabilities Check",permalink:"/dependency-vulnerabities-check/"}},l={},c=[{value:"Using Sonar with JHipster",id:"using-sonar-with-jhipster",level:2},{value:"Excluding Files from Jacoco Analysis",id:"excluding-files-from-jacoco-analysis",level:2},{value:"Maven",id:"maven",level:3},{value:"Gradle",id:"gradle",level:3},{value:"Automatic analysis of the default generated project",id:"automatic-analysis-of-the-default-generated-project",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Code quality can be analyzed using ",(0,t.jsx)(n.a,{href:"https://sonarcloud.io",children:"SonarCloud"}),", which is automatically configured by JHipster."]}),"\n",(0,t.jsx)(n.h2,{id:"using-sonar-with-jhipster",children:"Using Sonar with JHipster"}),"\n",(0,t.jsxs)(n.p,{children:["JHipster provides a specific Docker Compose configuration for Sonar (",(0,t.jsx)(n.a,{href:"/docker-compose",children:"here is the JHipster Docker Compose documentation"}),") that provides an out-of-the box Sonar instance. At the root of your project, please run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker-compose -f src/main/docker/sonar.yml up -d\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you use Maven, it has been automatically configured:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"./mvnw -Pprod clean verify sonar:sonar -Dsonar.host.url=http://localhost:9001\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you need to re-run the Sonar phase, please be sure to specify at least the ",(0,t.jsx)(n.code,{children:"initialize"})," phase since Sonar properties are loaded from the sonar-project.properties file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"./mvnw initialize sonar:sonar -Dsonar.host.url=http://localhost:9001\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you use Gradle, it has also been automatically configured:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"./gradlew -Pprod clean check jacocoTestReport sonarqube -Dsonar.host.url=http://localhost:9001\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In every cases you can, now, run analysis with ",(0,t.jsx)(n.a,{href:"https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner",children:"sonar-scanner"})," if you already have installed it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sonar-scanner\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once the analysis completes, it will be available on the Sonar dashboard, which by default is available on ",(0,t.jsx)(n.a,{href:"http://127.0.0.1:9001/",children:"http://127.0.0.1:9001/"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"excluding-files-from-jacoco-analysis",children:"Excluding Files from Jacoco Analysis"}),"\n",(0,t.jsx)(n.p,{children:"In case you would like to exclude certain classes from coverage analysis (e.g. generated classes or the application class) and would like to have the correct\ncoverage in the default jacoco html report you have to exclude the classes from analysis and from reporting."}),"\n",(0,t.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,t.jsxs)(n.p,{children:["You need to add exclusions to the ",(0,t.jsx)(n.code,{children:"prepare-agent"})," and ",(0,t.jsx)(n.code,{children:"report"})," goal of both unit and integration tests:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<plugin>\n    <groupId>org.jacoco</groupId>\n    <artifactId>jacoco-maven-plugin</artifactId>\n    <version>${jacoco-maven-plugin.version}</version>\n    <executions>\n        <execution>\n            <id>pre-unit-tests</id>\n            <goals>\n                <goal>prepare-agent</goal>\n            </goals>\n            <configuration>\n                \x3c!-- Exclude any class named Application from instrumentation --\x3e\n                <excludes>**/Application.*</excludes>\n                <destFile>${jacoco.utReportFile}</destFile>\n            </configuration>\n        </execution>\n        <execution>\n            <id>post-unit-test</id>\n            <phase>test</phase>\n            <goals>\n                <goal>report</goal>\n            </goals>\n            <configuration>\n                \x3c!-- Exclude any class named Application from reporting--\x3e\n                <excludes>**/Application.*</excludes>\n                <dataFile>${jacoco.utReportFile}</dataFile>\n                <outputDirectory>${jacoco.reportFolder}</outputDirectory>\n            </configuration>\n        </execution>\n        <execution>\n            <id>pre-integration-tests</id>\n            <goals>\n                <goal>prepare-agent-integration</goal>\n            </goals>\n            <configuration>\n                \x3c!-- Exclude any class named Application from instrumentation --\x3e\n                <excludes>**/Application.*</excludes>\n                <destFile>${jacoco.itReportFile}</destFile>\n            </configuration>\n        </execution>\n        <execution>\n            <id>post-integration-tests</id>\n            <phase>post-integration-test</phase>\n            <goals>\n                <goal>report-integration</goal>\n            </goals>\n            <configuration>\n                \x3c!-- Exclude any class named Application from reporting--\x3e\n                <excludes>**/Application.*</excludes>\n                <dataFile>${jacoco.itReportFile}</dataFile>\n                <outputDirectory>${jacoco.reportFolder}</outputDirectory>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gradle",children:"Gradle"}),"\n",(0,t.jsxs)(n.p,{children:["You can add the following to ",(0,t.jsx)(n.code,{children:"sonar.gradle"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:"test {\n    jacoco {\n        excludes += ['build/generated/**']\n    }\n}\n\njacocoTestReport {\n    afterEvaluate {\n        classDirectories = files(classDirectories.files.collect {\n            fileTree(dir: it, exclude: [\n                    '**/*_.class'\n            ])\n        })\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"automatic-analysis-of-the-default-generated-project",children:"Automatic analysis of the default generated project"}),"\n",(0,t.jsx)(n.p,{children:'The JHipster generator project publishes a sample project which is analyzed every time a new commit is merged in the "main" branch:'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://sonarcloud.io/dashboard?id=jhipster-sample-application",children:"Analysis of the JHipster Sample Application"})," under the ",(0,t.jsx)(n.a,{href:"https://sonarcloud.io/organizations/jhipster",children:"JHipster Organization"})]}),"\n",(0,t.jsx)(n.p,{children:"This allows the JHipster team to make sure that you will start developing your project on the cleanest code possible."}),"\n",(0,t.jsxs)(n.p,{children:["This analysis is provided for free by ",(0,t.jsx)(n.a,{href:"https://sonarcloud.io",children:"SonarCloud"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var t=a(96540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);