"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[9293],{67365:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>o});var t=i(74848),s=i(28453);const d={title:"JHipster Domain Language (JDL) - Entities & fields",slug:"/jdl/entities-fields",last_update:{date:new Date("2019-10-27T12:00:00.000Z")}},l=void 0,a={id:"jdl/entities-fields",title:"JHipster Domain Language (JDL) - Entities & fields",description:"Syntax",source:"@site/docs/jdl/entities-fields.mdx",sourceDirName:"jdl",slug:"/jdl/entities-fields",permalink:"/jdl/entities-fields",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/jdl/entities-fields.mdx",tags:[],version:"current",lastUpdatedAt:15721776e5,frontMatter:{title:"JHipster Domain Language (JDL) - Entities & fields",slug:"/jdl/entities-fields",last_update:{date:"2019-10-27T12:00:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Applications",permalink:"/jdl/applications"},next:{title:"Enums",permalink:"/jdl/enums"}},r={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic example",id:"basic-example",level:3},{value:"With a custom table name",id:"with-a-custom-table-name",level:3},{value:"With fields",id:"with-fields",level:3},{value:"With field validations",id:"with-field-validations",level:3},{value:"Blob declaration",id:"blob-declaration",level:3},{value:"Regular expressions",id:"regular-expressions",level:3},{value:"Commenting",id:"commenting",level:3},{value:"Field types and validations",id:"field-types-and-validations",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.p,{children:"The entity declaration is done as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"[<entity javadoc>]\n[<entity annotation>*]\nentity <entity name> [(<table name>)] {\n  [<field javadoc>]\n  [<field annotation>*]\n  <field name> <field type> [<validation>*]\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<entity name>"})," the name of the entity,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<field name>"})," the name of one field of the entity,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<field type>"})," the JHipster supported type of the field,"]}),"\n",(0,t.jsxs)(n.li,{children:["and as an option:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<entity javadoc>"})," the documentation of the entity,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<entity annotation>"})," the options for the entity (see ",(0,t.jsx)(n.a,{href:"/jdl/options/#entity-options",title:"Options",children:"OptionsEntity"})," for a complete list of available options),"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<table name>"})," the database table name (if you want to specify something different that the name automatically computed from the entity name),"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<field javadoc>"})," the documentation of the field,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<field annotation>"})," the options for the field (see ",(0,t.jsx)(n.a,{href:"/jdl/options/#field-options",title:"Options",children:"OptionsField"})," for a complete list of available options),"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"<validation>"})," the validations for the field."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"basic-example",children:"Basic example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is equivalent to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A(a) {}\n"})}),"\n",(0,t.jsx)(n.p,{children:'The former the simpler form, without specifying a "body" (braces for fields) and a table name.'}),"\n",(0,t.jsx)(n.h3,{id:"with-a-custom-table-name",children:"With a custom table name"}),"\n",(0,t.jsx)(n.p,{children:"Specifying a custom table name is possible too:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:" entity A(my_super_entity)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-fields",children:"With fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A {\n  name String required\n  age Integer\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-field-validations",children:"With field validations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A {\n  name String required\n  age Integer min(42) max(42)\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"blob-declaration",children:"Blob declaration"}),"\n",(0,t.jsx)(n.p,{children:"JHipster gives a great choice as one can choose between an image type or any binary type. JDL lets you do the same.\nCreate a custom type (see DataType) with the editor, name it according to these conventions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"AnyBlob"})," or ",(0,t.jsx)(n.code,{children:"Blob"}),' to create a field of the "any" binary type;']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ImageBlob"})," to create a field meant to be an image."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TextBlob"})," to create a field for a CLOB (long text)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"And you can create as many DataTypes as you like."}),"\n",(0,t.jsx)(n.h3,{id:"regular-expressions",children:"Regular expressions"}),"\n",(0,t.jsx)(n.p,{children:"This is a certain validation (only available to String types), and its syntax is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A {\n  name String pattern(/^[A-Z][a-z]+\\d$/)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's break it down:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pattern"})," is the keyword to declare a regex validation (with the normal parentheses)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/.../"})," the pattern is declared inside two slashes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"\\"})," anti-slashes needn't be escaped"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"commenting",children:"Commenting"}),"\n",(0,t.jsx)(n.p,{children:"Commenting is possible in the JDL for entities and fields, and will generate documentation (Javadoc or JSDoc, depending\non the backend)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"/**\n * This is a comment\n * about a class\n * @author Someone\n */\nentity A {\n  /**\n   * This comment will also be used!\n   * @type...\n   */\n   name String\n   age Integer // this is yet another comment\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"These comments will later be added as Javadoc comments by JHipster. The JDL possesses its own kind of comment:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"// an ignored comment"}),"\n",(0,t.jsx)(n.li,{children:"/** not an ignored comment */"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Therefore, anything that starts with ",(0,t.jsx)(n.code,{children:"//"})," is considered an internal comment for JDL, and will not be counted as Javadoc.\nPlease note that the JDL Studio directives that start with ",(0,t.jsx)(n.code,{children:"#"})," will be ignored during parsing."]}),"\n",(0,t.jsx)(n.p,{children:"Another form of comments are the following comments:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A {\n  name String /** My super field */\n  count Integer /** My other super field */\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here A's name will be commented with ",(0,t.jsx)(n.code,{children:"My super field"}),", B with ",(0,t.jsx)(n.code,{children:"My other super field"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Yes, commas are not mandatory but it's wiser to have them so as not to make mistakes in the code.\n",(0,t.jsx)(n.strong,{children:"If you want to mix commas and following comments, beware!"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A {\n  name String, /** My comment */\n  count Integer\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"A's name won't have the comment, because the count will."}),"\n",(0,t.jsx)(n.h2,{id:"field-types-and-validations",children:"Field types and validations"}),"\n",(0,t.jsx)(n.p,{children:"Each field type has its own validation list. Here are the types supported in the JDL:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"JDL type"}),(0,t.jsx)(n.th,{children:"Validations"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"required, minlength, maxlength, pattern, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Integer"}),(0,t.jsx)(n.td,{children:"required, min, max, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Long"}),(0,t.jsx)(n.td,{children:"required, min, max, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"BigDecimal"}),(0,t.jsx)(n.td,{children:"required, min, max, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Float"}),(0,t.jsx)(n.td,{children:"required, min, max, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Double"}),(0,t.jsx)(n.td,{children:"required, min, max, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Enum"}),(0,t.jsx)(n.td,{children:"required, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Boolean"}),(0,t.jsx)(n.td,{children:"required, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"LocalDate"}),(0,t.jsx)(n.td,{children:"required, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ZonedDateTime"}),(0,t.jsx)(n.td,{children:"required, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Instant"}),(0,t.jsx)(n.td,{children:"required, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Duration"}),(0,t.jsx)(n.td,{children:"required, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"UUID"}),(0,t.jsx)(n.td,{children:"required, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Blob"}),(0,t.jsx)(n.td,{children:"required, minbytes, maxbytes, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"AnyBlob"}),(0,t.jsx)(n.td,{children:"required, minbytes, maxbytes, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ImageBlob"}),(0,t.jsx)(n.td,{children:"required, minbytes, maxbytes, unique"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"TextBlob"}),(0,t.jsx)(n.td,{children:"required, unique"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(96540);const s={},d=t.createContext(s);function l(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);