"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[9636],{45372:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=i(74848),s=i(28453);const a={title:"JHipster Domain Language (JDL) - Getting Started",slug:"/jdl/getting-started",last_update:{date:new Date("2021-03-08T12:00:00.000Z")}},l=void 0,o={id:"jdl/getting-started",title:"JHipster Domain Language (JDL) - Getting Started",description:"In this page, you'll learn about the JDL and how to create applications and everything around them.",source:"@site/docs/jdl/getting-started.mdx",sourceDirName:"jdl",slug:"/jdl/getting-started",permalink:"/jdl/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/jdl/getting-started.mdx",tags:[],version:"current",lastUpdatedAt:16152048e5,frontMatter:{title:"JHipster Domain Language (JDL) - Getting Started",slug:"/jdl/getting-started",last_update:{date:"2021-03-08T12:00:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/jdl/intro"},next:{title:"Applications",permalink:"/jdl/applications"}},r={},d=[{value:"Generating content",id:"generating-content",level:2},{value:"Using files",id:"using-files",level:3},{value:"Using an inline JDL",id:"using-an-inline-jdl",level:3},{value:"Using a remote JDL file",id:"using-a-remote-jdl-file",level:2},{value:"Generating applications",id:"generating-applications",level:2},{value:"Generating entities",id:"generating-entities",level:2},{value:"Generating a basic entity",id:"generating-a-basic-entity",level:3},{value:"Adding comments",id:"adding-comments",level:3},{value:"Entities in applications",id:"entities-in-applications",level:3},{value:"Generating fields",id:"generating-fields",level:2},{value:"Adding comments and validations",id:"adding-comments-and-validations",level:3},{value:"Enumerations",id:"enumerations",level:2},{value:"Adding relationships",id:"adding-relationships",level:2},{value:"Unidirectional or bidirectional relationships?",id:"unidirectional-or-bidirectional-relationships",level:3},{value:"Relationship comments &amp; validations",id:"relationship-comments--validations",level:3},{value:"Options",id:"options",level:2},{value:"Annotations",id:"annotations",level:3},{value:"Deployments",id:"deployments",level:2},{value:"Constants",id:"constants",level:2},{value:"Exporting to a JDL file",id:"exporting-to-a-jdl-file",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"In this page, you'll learn about the JDL and how to create applications and everything around them."}),"\n",(0,t.jsx)(n.h2,{id:"generating-content",children:"Generating content"}),"\n",(0,t.jsx)(n.h3,{id:"using-files",children:"Using files"}),"\n",(0,t.jsx)(n.p,{children:"You can use JDL files to generate entities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create a file with the extension '.jh' or '.jdl',"}),"\n",(0,t.jsxs)(n.li,{children:["Declare your applications, deployments, entities and relationships or create and download the file with ",(0,t.jsx)(n.a,{href:"https://start.jhipster.tech/jdl-studio/",children:"JDL-Studio"})," or ",(0,t.jsx)(n.a,{href:"https://www.jhipster.tech/jhipster-ide/",children:"JHipster IDE"}),","]}),"\n",(0,t.jsxs)(n.li,{children:["If you are creating only entities then run ",(0,t.jsx)(n.code,{children:"jhipster jdl my_file.jdl"})," in your JHipster application's root folder."]}),"\n",(0,t.jsxs)(n.li,{children:["If you are creating applications then run ",(0,t.jsx)(n.code,{children:"jhipster jdl my_file.jdl"})," in a folder."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["and ",(0,t.jsx)(n.em,{children:"Voil\xe0"}),", you are done!"]}),"\n",(0,t.jsx)(n.p,{children:"If you work in a team, perhaps you would like to have multiple files instead of one.\nWe added this option so that you don't manually concatenate all the files into one, you have to run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"jhipster jdl my_file1.jdl my_file2.jdl\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you do not want to regenerate your entities while importing a JDL, you can use the ",(0,t.jsx)(n.code,{children:"--json-only"})," flag to skip the\nentity creation part and create only the json files in ",(0,t.jsx)(n.code,{children:".jhipster"})," folder."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"jhipster jdl ./my-jdl-file.jdl --json-only\n"})}),"\n",(0,t.jsxs)(n.p,{children:["By default ",(0,t.jsx)(n.code,{children:"jdl"})," regenerates only entities that have changed, if you want all your entities to be regenerated\nthen pass in the ",(0,t.jsx)(n.code,{children:"--force"})," flag.\nPlease note that this will overwrite all your local changes to the entity files:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"jhipster jdl ./my-jdl-file.jdl --force\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you want to use it in your project, you can add do so by doing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"npm install jhipster-core --save\n"})}),"\n",(0,t.jsxs)(n.p,{children:["to install it locally, and save it in your ",(0,t.jsx)(n.code,{children:"package.json"})," file."]}),"\n",(0,t.jsx)(n.h3,{id:"using-an-inline-jdl",children:"Using an inline JDL"}),"\n",(0,t.jsxs)(n.p,{children:["The other way to generate content is to pass a JDL code in your CLI, this way:\n",(0,t.jsx)(n.code,{children:'jhipster jdl --inline "application { config { baseName jhipster, applicationType microservice } }"'}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This way of generating content is especially useful when generating entities."}),"\n",(0,t.jsx)(n.p,{children:"For now, we'll start with small JDL content to get to know the various ways to generate content.\nThe focus here is on the generation of code. Explanation about the syntax is made in other sections."}),"\n",(0,t.jsx)(n.p,{children:"Here's the basic content we'll use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"application {\n  config {\n    baseName jhipster\n    applicationType microservice\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:'This is a very basic microservice application named "jhipster", and we\'ll see the various ways to generate a\napplication from this sample.'}),"\n",(0,t.jsx)(n.p,{children:"You'll see that, with this little sample, you've managed to create an application from scratch."}),"\n",(0,t.jsx)(n.h2,{id:"using-a-remote-jdl-file",children:"Using a remote JDL file"}),"\n",(0,t.jsxs)(n.p,{children:["You can also use an URL with the ",(0,t.jsx)(n.code,{children:"jdl"})," command. Just pass the URL instead of the file name as below"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"jhipster jdl https://my-site.com/my.jdl\n\njhipster jdl https://gist.githubusercontent.com/user/id/raw/id/myapp.jdl\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also fetch a remote JDL file from our ",(0,t.jsx)(n.a,{href:"https://github.com/jhipster/jdl-samples",children:"JDL sample repository"})," by just specifying the filename and we will automatically resolve the URL"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"jhipster jdl default.jdl\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generating-applications",children:"Generating applications"}),"\n",(0,t.jsx)(n.p,{children:"As we've seen in the previous example, generating applications is quite straightforward, let's take the previous example\nand add more things to it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"application {\n  config {\n    baseName jhipster\n    applicationType microservice\n    serverPort 4242\n    buildTool gradle\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's break it down:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"application"})," is the keyword to say you want to declare an application"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"})," to say that you want to specify the configuration","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"we'll later see that you can also declare entities in applications"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"baseName"}),", ",(0,t.jsx)(n.code,{children:"applicationType"}),", etc. are keywords to tweak the application"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This is how you create an application using the JDL.\nTo see all supported application options, head to ",(0,t.jsx)(n.a,{href:"/jdl/applications",children:"this page"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"generating-entities",children:"Generating entities"}),"\n",(0,t.jsxs)(n.p,{children:["Generating entities is a bit less straightforward.\nYou can also go to the dedicated ",(0,t.jsx)(n.a,{href:"/jdl/entities-fields",children:"entity page"})," to know more about what you can do with entities."]}),"\n",(0,t.jsx)(n.h3,{id:"generating-a-basic-entity",children:"Generating a basic entity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A\n"})}),"\n",(0,t.jsx)(n.p,{children:"This entity doesn't have fields, or even an explicit table name (even though JHipster sets one for you from the entity's\nname).\nThis is the simplest way possible to declare an entity."}),"\n",(0,t.jsx)(n.p,{children:"Note that this form is equivalent to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A(a) {}\n"})}),"\n",(0,t.jsx)(n.p,{children:"We've added a table name and braces.\nBy default, JHipster generates a table name based on the specified entity name."}),"\n",(0,t.jsx)(n.p,{children:"The braces are needed when declaring fields."}),"\n",(0,t.jsx)(n.h3,{id:"adding-comments",children:"Adding comments"}),"\n",(0,t.jsx)(n.p,{children:"This is the way to add a comment to an entity:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"/**\n * This is a simple entity\n */\nentity A\n"})}),"\n",(0,t.jsx)(n.p,{children:"If the backend is in Java, this will add a Javadoc comment."}),"\n",(0,t.jsx)(n.h3,{id:"entities-in-applications",children:"Entities in applications"}),"\n",(0,t.jsxs)(n.p,{children:["To only generate some entities in an application, the ",(0,t.jsx)(n.code,{children:"entities"})," keyword can be used:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"application {\n  config {}\n  entities A, B\n}\n\napplication {\n  config {}\n  entities C\n}\n\nentity A\nentity B\nentity C\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is especially useful in microservice architectures."}),"\n",(0,t.jsx)(n.h2,{id:"generating-fields",children:"Generating fields"}),"\n",(0,t.jsx)(n.p,{children:"Fields are declared in entities, by specifying a body to an entity:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity MyEntity {\n  name String\n  closed Boolean\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["There are more than these two types, check them out in the ",(0,t.jsx)(n.a,{href:"/jdl/entities-fields",children:"entities & fields page"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"adding-comments-and-validations",children:"Adding comments and validations"}),"\n",(0,t.jsx)(n.p,{children:"The same way we've added comments to entities, we can add comments to fields:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity MyEntity {\n  /** My field */\n  name String required minlength(2) maxlength(50)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Validations depend on the field type, and are also detailed in the ",(0,t.jsx)(n.a,{href:"/jdl/entities-fields",children:"entities & fields page"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"enumerations",children:"Enumerations"}),"\n",(0,t.jsx)(n.p,{children:"Enumerations are types with fixed values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"enum Type {\n  A,\n  B(b)\n}\n\nentity E {\n  name Type\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Notice how enumeration's values are optional."}),"\n",(0,t.jsxs)(n.p,{children:["They only have one validation: ",(0,t.jsx)(n.code,{children:"required"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can check the dedicated ",(0,t.jsx)(n.a,{href:"/jdl/enums",children:"enum page"})," for details about enums."]}),"\n",(0,t.jsx)(n.h2,{id:"adding-relationships",children:"Adding relationships"}),"\n",(0,t.jsxs)(n.p,{children:["Relationships between entities are also available and are declared with the ",(0,t.jsx)(n.code,{children:"relationship"})," keyword."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A\nentity B\n\nrelationship OneToOne {\n  A{a} to B{b}\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here's what we can see:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OneToOne"})," is the relationship type","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["there are also ",(0,t.jsx)(n.code,{children:"OneToMany"}),", ",(0,t.jsx)(n.code,{children:"ManyToMany"})," and ",(0,t.jsx)(n.code,{children:"ManyToOne"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["we declare the source and the destination of the relationship (from ",(0,t.jsx)(n.code,{children:"A"})," to ",(0,t.jsx)(n.code,{children:"B"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["we also declare the injected fields in each entity (",(0,t.jsx)(n.code,{children:"a"})," in ",(0,t.jsx)(n.code,{children:"B"}),", and ",(0,t.jsx)(n.code,{children:"b"})," in ",(0,t.jsx)(n.code,{children:"A"}),")","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"this means the relationship is bidirectional"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To know more about relationships, you can head to ",(0,t.jsx)(n.a,{href:"/managing-relationships/",children:"the dedicated page"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"unidirectional-or-bidirectional-relationships",children:"Unidirectional or bidirectional relationships?"}),"\n",(0,t.jsx)(n.p,{children:"Depending on how you design your models, you may want unidirectional relationships instead of bidirectional ones.\nThis is achieved by not specifying an injected field like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"relationship OneToOne {\n  A{a} to B\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also not specify them, and at least one will be injected by default (the source)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"relationship OneToOne {\n  A to B\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"relationship-comments--validations",children:"Relationship comments & validations"}),"\n",(0,t.jsxs)(n.p,{children:["Relationships also have comments, validations (only one: ",(0,t.jsx)(n.code,{children:"required"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"relationship OneToOne {\n  A{a} to B{b required}\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this example we can see:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"required"})," to specify if a side of the relationship is required","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"instead of having 0..1, this One to One relationship requires 1 side not to be nil"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To know more about relationships, you can go to the dedicated ",(0,t.jsx)(n.a,{href:"/jdl/relationships",children:"relationship page"})]}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsx)(n.p,{children:"The same way you can apply options to entities in the CLI, you can also do that in the JDL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"entity A\nentity B\nentity C\n\nreadOnly A\ndto * with mapstruct\nservice * with serviceImpl\npaginate A, B with pager\n"})}),"\n",(0,t.jsx)(n.p,{children:"There a some interesting things happening here:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dto"}),", ",(0,t.jsx)(n.code,{children:"paginate"})," and ",(0,t.jsx)(n.code,{children:"service"})," are binary options as they need an entity list and a value","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"with"})," is used to specify the option value"]}),"\n",(0,t.jsxs)(n.li,{children:["note the ",(0,t.jsx)(n.code,{children:"*"})," which means the option is to be applied to all the entities"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"readOnly"})," is an unary option, that means that such options only take an entity list"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"There are more than one way to declare an entity list:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["you can enumerate them one by one: ",(0,t.jsx)(n.code,{children:"A, B, C"})]}),"\n",(0,t.jsxs)(n.li,{children:["you can select all of them: ",(0,t.jsx)(n.code,{children:"*"})," or ",(0,t.jsx)(n.code,{children:"all"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["you can have exceptions to exclude entities: ",(0,t.jsx)(n.code,{children:"service * with serviceImpl except A, B"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"annotations",children:"Annotations"}),"\n",(0,t.jsx)(n.p,{children:"Annotations are another way to declare options, let's rewrite the previous example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"@readOnly\n@dto(mapstruct)\n@service(serviceImpl)\n@paginate(pager)\nentity A\n\n@dto(mapstruct)\n@service(serviceImpl)\n@paginate(pager)\nentity B\n\n@dto(mapstruct)\n@service(serviceImpl)\nentity C\n"})}),"\n",(0,t.jsx)(n.p,{children:'Similar to Java, or Typescript, annotations are "decorators", options to entities.'}),"\n",(0,t.jsx)(n.p,{children:"This example and the previous are equivalent as they can be used to generate the same code."}),"\n",(0,t.jsxs)(n.p,{children:["To know more about options, you can go to the ",(0,t.jsx)(n.a,{href:"/jdl/options",children:"option page"})]}),"\n",(0,t.jsx)(n.h2,{id:"deployments",children:"Deployments"}),"\n",(0,t.jsxs)(n.p,{children:["Finally, deployments can also be generated from a JDL file using the ",(0,t.jsx)(n.code,{children:"deployment"})," keyword, compatible with JHipster\nv5.7 and above:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:'deployment {\n  deploymentType docker-compose\n  appsFolders [foo, bar]\n  dockerRepositoryName "yourDockerLoginName"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"To import one or several deployments, you need not be in a JHipster application folder."})}),"\n",(0,t.jsxs)(n.p,{children:["Deployments are described in ",(0,t.jsx)(n.a,{href:"/jdl/deployments",children:"their own page"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"A JHipster deployment has a config with default values for all other properties and using the previous syntax will\nensure your deployment will use the default values (as if you didn't make any specific choice).\nThe resulting deployment will have:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["deploymentType: ",(0,t.jsx)(n.code,{children:"docker-compose"})]}),"\n",(0,t.jsxs)(n.li,{children:["appsFolders: ",(0,t.jsx)(n.code,{children:"foo, bar"})]}),"\n",(0,t.jsxs)(n.li,{children:["dockerRepositoryName: ",(0,t.jsx)(n.code,{children:"yourDockerLoginName"})]}),"\n",(0,t.jsxs)(n.li,{children:["serviceDiscoveryType: ",(0,t.jsx)(n.code,{children:"consul"})]}),"\n",(0,t.jsxs)(n.li,{children:["gatewayType: ",(0,t.jsx)(n.code,{children:"SpringCloudGateway"})]}),"\n",(0,t.jsxs)(n.li,{children:["directoryPath: ",(0,t.jsx)(n.code,{children:"../"})]}),"\n",(0,t.jsx)(n.li,{children:"etc."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Now, if you want some custom options:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:'deployment {\n  deploymentType kubernetes\n  appsFolders [store, invoice, notification, product]\n  dockerRepositoryName "yourDockerLoginName"\n  serviceDiscoveryType no\n  istio autoInjection\n  kubernetesServiceType Ingress\n  kubernetesNamespace jhipster\n  ingressDomain "jhipster.192.168.99.100.nip.io"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Those options are only a sample of what's available in the JDL.\nThe complete list of options is available in the deployment page, ",(0,t.jsx)(n.a,{href:"/jdl/deployments",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,t.jsx)(n.p,{children:"The JDL supports numerical constants.\nHere is an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jdl",children:"DEFAULT_MIN_LENGTH = 1\nDEFAULT_MAX_LENGTH = 42\nDEFAULT_MIN_BYTES = 20\nDEFAULT_MAX_BYTES = 40\nDEFAULT_MIN = 0\nDEFAULT_MAX = 41\n\nentity A {\n  name String minlength(DEFAULT_MIN_LENGTH) maxlength(DEFAULT_MAX_LENGTH)\n  content TextBlob required\n  count Integer min(DEFAULT_MIN) max(DEFAULT_MAX)\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"exporting-to-a-jdl-file",children:"Exporting to a JDL file"}),"\n",(0,t.jsx)(n.p,{children:"If you already have entities in your application and wish to have a JDL file, don't worry! You don't have to write it from\nscratch as there's a sub-generator that does that for you."}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"jhipster export-jdl <FILE_NAME>"})," in your app's root folder and you'll have all your applications, entities,\nrelationships and options exporting in a single JDL file."]}),"\n",(0,t.jsxs)(n.p,{children:["Note: you can also not provide a file name to the sub-generator, the exported JDL file will be named after the app's\nbase name. For instance, if your application's named 'mySuperApp' then your JDL file will be ",(0,t.jsx)(n.code,{children:"mySuperApp.jdl"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(96540);const s={},a=t.createContext(s);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);