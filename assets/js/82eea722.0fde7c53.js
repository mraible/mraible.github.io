"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[719],{98679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=t(74848),s=t(28453);const o={title:"Doing API-First development",slug:"/doing-api-first-development/",last_update:{date:new Date("2018-06-11T00:00:00.000Z")}},r=void 0,a={id:"options/doing-api-first-development",title:"Doing API-First development",description:"When generating a JHipster application, you can choose the API first development using OpenAPI-generator option when prompted for additional technologies.",source:"@site/docs/options/doing-api-first-development.mdx",sourceDirName:"options",slug:"/doing-api-first-development/",permalink:"/doing-api-first-development/",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/options/doing-api-first-development.mdx",tags:[],version:"current",lastUpdatedAt:15286752e5,frontMatter:{title:"Doing API-First development",slug:"/doing-api-first-development/",last_update:{date:"2018-06-11T00:00:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Using Websockets",permalink:"/using-websockets/"},next:{title:"Using a cache",permalink:"/using-cache/"}},l={},c=[{value:"Rationale for API-First development",id:"rationale-for-api-first-development",level:2},{value:"Using the OpenAPI-generator plugins",id:"using-the-openapi-generator-plugins",level:2},{value:"Using the <code>openapi-client</code> Sub-Generator",id:"using-the-openapi-client-sub-generator",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["When generating a JHipster application, you can choose the ",(0,i.jsx)(n.code,{children:"API first development using OpenAPI-generator"})," option when prompted for additional technologies.\nThis option will configure your build tool to use ",(0,i.jsx)(n.a,{href:"https://github.com/OpenAPITools/openapi-generator",children:"OpenAPI-generator"})," to generate API code from an OpenAPI (Swagger) definition file.\nBoth Swagger v2 and OpenAPI v3 formats are supported."]}),"\n",(0,i.jsx)(n.h2,{id:"rationale-for-api-first-development",children:"Rationale for API-First development"}),"\n",(0,i.jsx)(n.p,{children:"In API first development, instead of generating the documentation from the code, you need to write the specification first and then generate code from it.\nThis has the following advantages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can design your API for the consumers and not as a consequence of your implementation."}),"\n",(0,i.jsx)(n.li,{children:"You can use the specification file to mock your new server endpoints before they are released so you can more decouple frontend and backend development."}),"\n",(0,i.jsx)(n.li,{children:"You don't need a live server to use your OpenAPI documentation."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"using-the-openapi-generator-plugins",children:"Using the OpenAPI-generator plugins"}),"\n",(0,i.jsxs)(n.p,{children:["The OpenAPI specification file will be located at src/main/resources/swagger/api.yml and is used to generate endpoint interfaces that you can implement.\nThose interfaces have default methods which answer with a ",(0,i.jsx)(n.code,{children:"501 Not implemented"})," HTTP status and an empty body.\nWrite your specification using a tool such as ",(0,i.jsx)(n.a,{href:"http://editor.swagger.io",children:"swagger-editor"}),", put it in ",(0,i.jsx)(n.code,{children:"src/main/resources/swagger/api.yml"}),", then run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./mvnw generate-sources\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or for gradle:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./gradlew openApiGenerate\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Then implement the "Delegate" interfaces generated in ',(0,i.jsx)(n.code,{children:"${buildDirectory}/generated-sources/openapi/src/main/java/${package}/web/api/"})," with ",(0,i.jsx)(n.code,{children:"@Service"})," classes."]}),"\n",(0,i.jsxs)(n.p,{children:["Example of code to write yourself for the famous ",(0,i.jsx)(n.a,{href:"http://petstore.swagger.io",children:"petstore"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class PetApiDelegateImpl implements PetApiDelegate {\n\n    @Override\n    public ResponseEntity<List<Pet>> findPetsByStatus(List<String> status) {\n        return ResponseEntity.ok(\n            status.stream()\n                .distinct()\n                .map(Pet.StatusEnum::fromValue)\n                .map(statusEnum -> new Pet().id(RandomUtils.nextLong()).status(statusEnum))\n                .collect(Collectors.toList())\n        );\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you provide the ",(0,i.jsx)(n.code,{children:"NativeWebRequest"})," bean to the delegate interface, then basic example bodies will be returned for the methods that have not been overridden (still with a 501 HTTP status code).\nThis is useful to mock your endpoints before providing the actual implementation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class PetApiDelegateImpl implements PetApiDelegate {\n\n    private final NativeWebRequest request;\n\n    public PetApiDelegateImpl(NativeWebRequest request) {\n        this.request = request;\n    }\n\n    @Override\n    public Optional<NativeWebRequest> getRequest() {\n        return Optional.ofNullable(request);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then you can get the examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'$ curl -X GET --header \'Accept: application/json\' \'http://localhost:8080/v2/pet/findByStatus?status=pending\'\n{  "photoUrls" : [ "photoUrls", "photoUrls" ],  "name" : "doggie",  "id" : 0,  "category" : {    "name" : "name",    "id" : 6  },  "tags" : [ {    "name" : "name",    "id" : 1  }, {    "name" : "name",    "id" : 1  } ],  "status" : "available"}%\n$ curl -X GET --header \'Accept: application/xml\' \'http://localhost:8080/v2/pet/findByStatus?status=pending\'\n<Pet>  <id>123456789</id>  <name>doggie</name>  <photoUrls>    <photoUrls>aeiou</photoUrls>  </photoUrls>  <tags>  </tags>  <status>aeiou</status></Pet>%\n'})}),"\n",(0,i.jsx)(n.p,{children:"Probably that your IDE exclude, from sources, the output folder. Be sure to reload the configuration to detect the generated classes.\nIt can be done through your IDE UI or through command."}),"\n",(0,i.jsx)(n.p,{children:"When using Eclipse or VSCode"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"With maven"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./mvnw eclipse:clean eclipse:eclipse\n"})}),"\n",(0,i.jsx)(n.p,{children:"When using IntelliJ"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"With maven"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./mvnw idea:idea\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"using-the-openapi-client-sub-generator",children:["Using the ",(0,i.jsx)(n.code,{children:"openapi-client"})," Sub-Generator"]}),"\n",(0,i.jsxs)(n.p,{children:["JHipster also provides support for generation of client code using ",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/",children:"Spring Cloud OpenFeign"})," or Spring Webclient for reactive apps using an OpenAPI/Swagger specification.\nThe generated Client can be used in both Monolithic and Micro-service applications and supports Swagger v2 and OpenAPI v3 definitions. To invoke this sub-generator run ",(0,i.jsx)(n.code,{children:"jhipster openapi-client"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);