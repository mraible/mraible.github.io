"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[3271],{67199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=n(74848),a=n(28453);const i={title:"Using React (with Redux)",slug:"/using-react/",last_update:{date:new Date("2018-04-02T23:41:00.000Z")}},o=void 0,r={id:"development/using-react",title:"Using React (with Redux)",description:"This section refers to the JavaScript library React used with Redux.",source:"@site/docs/development/using-react.mdx",sourceDirName:"development",slug:"/using-react/",permalink:"/using-react/",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/development/using-react.mdx",tags:[],version:"current",lastUpdatedAt:152271246e4,frontMatter:{title:"Using React (with Redux)",slug:"/using-react/",last_update:{date:"2018-04-02T23:41:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Using Angular",permalink:"/using-angular/"},next:{title:"Using Vue",permalink:"/using-vue/"}},c={},d=[{value:"Project Structure",id:"project-structure",level:2},{value:"Redux",id:"redux",level:2},{value:"Authorizations",id:"authorizations",level:2},{value:"Notification System",id:"notification-system",level:2},{value:"React JHipster library",id:"react-jhipster-library",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["This section refers to the JavaScript library ",(0,s.jsx)(t.strong,{children:"React"})," used with ",(0,s.jsx)(t.strong,{children:"Redux"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsxs)(t.p,{children:["The JHipster client code can be found under ",(0,s.jsx)(t.code,{children:"src/main/webapp"}),", and follows closely the ",(0,s.jsx)(t.a,{href:"https://github.com/piotrwitek/react-redux-typescript-guide/blob/master/README.md",children:"Piotr Witek React style guide"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Please read this guide first if you have any question on our application structure, file names, TypeScript conventions..."}),"\n",(0,s.jsx)(t.p,{children:"For React routes we follow a dash cased naming convention so that the URLs are clean and consistent.\nWhen you generate an entity the route names, route URLs and REST API endpoint URLs are generated according to this convention, also entity names are automatically pluralized where required."}),"\n",(0,s.jsx)(t.p,{children:"Here is the main project structure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"webapp\n\u251c\u2500\u2500 app                             - Your application\n\u2502   \u251c\u2500\u2500 config                      - General configuration (redux store, middleware, etc.)\n\u2502   \u251c\u2500\u2500 entities                    - Generated entities\n\u2502   \u251c\u2500\u2500 modules                     - Main components directory\n\u2502   \u2502   \u251c\u2500\u2500 account                 - Account related components\n\u2502   \u2502   \u251c\u2500\u2500 administration          - Administration related components\n\u2502   \u2502   \u251c\u2500\u2500 home                    - Application homepage\n\u2502   \u2502   \u2514\u2500\u2500 login                   - Login related components\n\u2502   \u251c\u2500\u2500 shared                      - Shared elements such as your header, footer, reducers, models and util classes\n\u2502   \u251c\u2500\u2500 app.scss                    - Your global application stylesheet if you choose the Sass option\n\u2502   \u251c\u2500\u2500 app.css                     - Your global application stylesheet\n\u2502   \u251c\u2500\u2500 app.tsx                     - The application main class\n\u2502   \u251c\u2500\u2500 index.tsx                   - Index script\n\u2502   \u251c\u2500\u2500 routes.tsx                  - Application main routes\n\u2502   \u2514\u2500\u2500 typings.d.ts                -\n\u251c\u2500\u2500 i18n                            - Translation files\n\u251c\u2500\u2500 static                          - Contains your static files such as images and fonts\n\u251c\u2500\u2500 swagger-ui                      - Swagger UI front-end\n\u251c\u2500\u2500 404.html                        - 404 page\n\u251c\u2500\u2500 favicon.ico                     - Fav icon\n\u251c\u2500\u2500 index.html                      - Index page\n\u251c\u2500\u2500 manifest.webapp                 - Application manifest\n\u2514\u2500\u2500 robots.txt                      - Configuration for bots and Web crawlers\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Using the ",(0,s.jsx)(t.a,{href:"/creating-an-entity",children:"entity sub-generator"})," to create a new entity called ",(0,s.jsx)(t.code,{children:"Foo"})," generates the following front-end files under ",(0,s.jsx)(t.code,{children:"src/main/webapp"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"webapp\n\u251c\u2500\u2500 app                                        \n\u2502   \u2514\u2500\u2500 entities\n\u2502       \u251c\u2500\u2500 foo                           - CRUD front-end for the Foo entity\n\u2502       \u2502   \u251c\u2500\u2500 foo-delete-dialog.tsx     - Delete dialog component\n\u2502       \u2502   \u251c\u2500\u2500 foo-detail.tsx            - Detail page component\n\u2502       \u2502   \u251c\u2500\u2500 foo-dialog.tsx            - Creation dialog component\n\u2502       \u2502   \u251c\u2500\u2500 foo.reducer.ts            - Foo entity reducer\n\u2502       \u2502   \u251c\u2500\u2500 foo.tsx                   - Entity main component\n\u2502       \u2502   \u2514\u2500\u2500 index.tsx                 - Entity main routes\n\u2502       \u2514\u2500\u2500 index.tsx                     - Entities routes    \n\u2514\u2500\u2500 i18n                                  - Translation files\n     \u251c\u2500\u2500 en                               - English translations\n     \u2502   \u251c\u2500\u2500 foo.json                     - English translation of Foo name, fields, ...\n     \u2514\u2500\u2500 fr                               - French translations\n         \u2514\u2500\u2500 foo.json                     - French translation of Foo name, fields, ...\n"})}),"\n",(0,s.jsx)(t.p,{children:"Please note that the default language translations would be based on what you have chosen during app generation. 'en' and 'fr' are shown here only for demonstration."}),"\n",(0,s.jsx)(t.h2,{id:"redux",children:"Redux"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://redux.js.org/",children:"Redux"})," is a predictable state container for JavaScript. It is used\ntogether with React to manage the state of your React components."]}),"\n",(0,s.jsxs)(t.p,{children:["Redux provides an object ",(0,s.jsx)(t.strong,{children:"store"})," used to store the whole state of your application.\nTo access this store and therefore update your state components, the only way is to dispatch\n",(0,s.jsx)(t.strong,{children:"actions"})," which describe the fact that an update is requested, then the ",(0,s.jsx)(t.strong,{children:"reducers"})," will\ndefine how the state is updated in response to these actions."]}),"\n",(0,s.jsx)(t.p,{children:"Here is an example of a reducer:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"export const ACTION_TYPES = {\n  FETCH_FOOS: 'foo/FETCH_FOOS',\n};\n\nconst initialState = {\n  loading: false,\n  foos: [],\n  updateSuccess: false,\n  updateFailure: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_FOOS):\n      return {\n        ...state,\n        updateSuccess: false,\n        updateFailure: false,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_FOOS):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: false,\n        updateFailure: true\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FOOS):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: true,\n        updateFailure: false,\n        foos: action.payload.data\n      };\n    default:\n      return state;\n  }\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In order to access your store and update the current application state, you need to dispatch\nactions to the store as mentioned previously. Actions are JavaScript objects and must have a ",(0,s.jsx)(t.strong,{children:"type"}),", which describe what\nthe action is going to perform and a usually they have also a ",(0,s.jsx)(t.strong,{children:"payload"})," which corresponds to\ndata you want to pass to the store."]}),"\n",(0,s.jsx)(t.p,{children:"Here is an action to access the store:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const apiUrl = SERVER_API_URL + '/api/foos';\n\n// Action\nexport const getFoos = () => ({\n  type: ACTION_TYPES.FETCH_FOOS,\n  payload: axios.get(apiUrl)\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The action described above indicates that we want to retrieve all the Foo objects by\nsending a GET request. The action type will match\nNotice that the ",(0,s.jsx)(t.strong,{children:"export"})," keyword is used to able the connected component to use that action\nwhen necessary (for instance, everytime the component is updated)."]}),"\n",(0,s.jsx)(t.h2,{id:"authorizations",children:"Authorizations"}),"\n",(0,s.jsxs)(t.p,{children:["Jhipster uses the ",(0,s.jsx)(t.a,{href:"https://github.com/ReactTraining/react-router",children:"React router"})," to organize the differents parts of your application."]}),"\n",(0,s.jsxs)(t.p,{children:["When it comes to routes that require authentication, the ",(0,s.jsx)(t.code,{children:"PrivateRoute"})," component generated is used. This component will prevent any unauthenticated user from accessing a route."]}),"\n",(0,s.jsx)(t.p,{children:"Here is an example of PrivateRoute usage:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'const Routes = () => (\n  <div className="view-routes">\n    <Route exact path="/" component={Home} />\n    <Route path="/login" component={Login} />\n    <PrivateRoute path="/account" component={Account} />\n  </div>\n);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As you can see, unauthenticated user can access ",(0,s.jsx)(t.code,{children:"/"})," and ",(0,s.jsx)(t.code,{children:"/login"})," but accessing ",(0,s.jsx)(t.code,{children:"/account"})," requires to be logged in."]}),"\n",(0,s.jsxs)(t.p,{children:["Please note that PrivateRoute uses the ",(0,s.jsx)(t.code,{children:"authentication.isAuthenticated"})," store value to know if the user is authenticated."]}),"\n",(0,s.jsx)(t.h2,{id:"notification-system",children:"Notification System"}),"\n",(0,s.jsxs)(t.p,{children:["JHipster uses ",(0,s.jsx)(t.a,{href:"https://github.com/fkhadra/react-toastify",children:"react-toastify"})," alerts for the notification system."]}),"\n",(0,s.jsx)(t.p,{children:"By default JHipster will show success notifications whenever an entity is created/updated/deleted\nand error notifications when there is an error caught from the response."}),"\n",(0,s.jsx)(t.h2,{id:"react-jhipster-library",children:"React JHipster library"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/jhipster/react-jhipster",children:"react-jhipster"})," lib provides utilities and generic services for a generated application. It handles i18n as well."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(96540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);