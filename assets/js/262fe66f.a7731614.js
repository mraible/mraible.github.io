"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[3658],{64036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(74848),s=t(28453);const o={title:"Security",slug:"/security/",last_update:{date:new Date("2023-12-01T18:00:00.000Z")}},r=void 0,a={id:"options/security",title:"Security",description:"To use Spring Security with a Single Web Page Application, like the ones generated by JHipster, you need XHR login/logout/error views. We have configured Spring Security in order to use those views correctly, and we generate all the JavaScript and HTML code for you.",source:"@site/docs/options/security.mdx",sourceDirName:"options",slug:"/security/",permalink:"/security/",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/options/security.mdx",tags:[],version:"current",lastUpdatedAt:17014536e5,frontMatter:{title:"Security",slug:"/security/",last_update:{date:"2023-12-01T18:00:00.000Z"}},sidebar:"docsSidebar",previous:{title:"JHipster Control Center",permalink:"/jhipster-control-center/"},next:{title:"Filtering your entities",permalink:"/entities-filtering/"}},c={},l=[{value:"JSON Web Tokens (JWT)",id:"json-web-tokens-jwt",level:2},{value:"Securing JWT",id:"securing-jwt",level:3},{value:"Session-based authentication",id:"session-based-authentication",level:2},{value:"Securing Session-based authentication",id:"securing-session-based-authentication",level:3},{value:"Improved remember-me mechanism",id:"improved-remember-me-mechanism",level:3},{value:"Cookie theft protection",id:"cookie-theft-protection",level:3},{value:"OAuth 2.0 and OpenID Connect",id:"oauth-20-and-openid-connect",level:2},{value:"Keycloak",id:"keycloak",level:3},{value:"Auth0",id:"auth0",level:3},{value:"Create an OIDC App using Auth0 Admin Dashboard",id:"create-an-oidc-app-using-auth0-admin-dashboard",level:4},{value:"Configure JHipster Application to use Auth0 as OIDC Provider",id:"configure-jhipster-application-to-use-auth0-as-oidc-provider",level:4},{value:"Use Environment Variables",id:"use-environment-variables",level:4},{value:"Create a Native App for Mobile on Auth0",id:"create-a-native-app-for-mobile-on-auth0",level:4},{value:"Update Your Ionic App",id:"update-your-ionic-app",level:4},{value:"Update Your React Native App",id:"update-your-react-native-app",level:4},{value:"Okta",id:"okta",level:3},{value:"Create an OIDC App with the Okta Admin Console",id:"create-an-oidc-app-with-the-okta-admin-console",level:4},{value:"Use Environment Variables",id:"use-environment-variables-1",level:4},{value:"Create a Native App for Mobile on Okta",id:"create-a-native-app-for-mobile-on-okta",level:4},{value:"Update Your Ionic App",id:"update-your-ionic-app-1",level:4},{value:"Update Your React Native App",id:"update-your-react-native-app-1",level:4},{value:"OpenID Connect Tutorials",id:"openid-connect-tutorials",level:4},{value:"HTTPS",id:"https",level:2},{value:"Leakage of implementation details",id:"leakage-of-implementation-details",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"To use Spring Security with a Single Web Page Application, like the ones generated by JHipster, you need XHR login/logout/error views. We have configured Spring Security in order to use those views correctly, and we generate all the JavaScript and HTML code for you."}),"\n",(0,i.jsx)(n.p,{children:"By default, JHipster comes with two different users:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"user", who is a normal user with "ROLE_USER" authorization. The default password is "user".'}),"\n",(0,i.jsx)(n.li,{children:'"admin", who is an admin user with "ROLE_USER" and "ROLE_ADMIN" authorizations. The default password is "admin".'}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:['The two authorizations "ROLE_USER" and "ROLE_ADMIN" provide the same access to the entities, which means that a "user" is authorized to perform the same CRUD operations as an "admin". This behavior can be an issue when the application goes to production because a "user" can, for example, delete any entities. More details on improving access-control can be found in this ',(0,i.jsx)(n.a,{href:"https://blog.ippon.tech/improving-the-access-control-of-a-jhipster-application/",children:"blog post"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For security reasons, you should change those default passwords in production."}),"\n",(0,i.jsx)(n.h2,{id:"json-web-tokens-jwt",children:"JSON Web Tokens (JWT)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://jwt.io/",children:"JSON Web Token (JWT)"})," authentication is a stateless security mechanism, so it's a good option if you want to scale your application on several different servers."]}),"\n",(0,i.jsxs)(n.p,{children:["Please note that this is the default option when using a ",(0,i.jsx)(n.a,{href:"/microservices-architecture/",children:"microservices architecture"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This authentication mechanism doesn't exist by default with Spring Security, it's a JHipster-specific integration of ",(0,i.jsx)(n.a,{href:"https://github.com/jwtk/jjwt",children:"the Java JWT project"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This solution uses a secure token that holds the user's login name and authorities. As the token is signed, it cannot be altered by a user."}),"\n",(0,i.jsxs)(n.p,{children:["JHipster automatically tracks invalid JWTs as an custom application metric, refer to the ",(0,i.jsx)(n.a,{href:"/monitoring/#security-metrics",children:"monitoring documentation"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"securing-jwt",children:"Securing JWT"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["JHipster uses a secret key, which can be configured using two Spring Boot properties: ",(0,i.jsx)(n.code,{children:"jhipster.security.authentication.jwt.secret"})," and ",(0,i.jsx)(n.code,{children:"jhipster.security.authentication.jwt.base64-secret"}),".\nThe second option uses a Base64-encoded string, so it is considered more secured and thus it is recommended. If both properties are configured, the ",(0,i.jsx)(n.code,{children:"secret"})," property (less secured) will be used, for legacy reasons.\nA warning will be shown at application startup if you don't use the Base64 property."]}),"\n",(0,i.jsx)(n.li,{children:"Those keys should have a minimum length of 512 bits: if they are not long enough, you will not be able to use them to login. If that happens, there will be a clear warning at the console to explain that issue."}),"\n",(0,i.jsxs)(n.li,{children:["The secret keys are configured in the ",(0,i.jsx)(n.code,{children:"application-*.yml"})," files. As those keys must be kept secret, you ",(0,i.jsx)(n.strong,{children:"should"})," store them in a secure way for your production profile.\nIt can be set up using the usual Spring Boot property configuration: using a Spring Cloud Config server like the ",(0,i.jsx)(n.a,{href:"/jhipster-registry/",children:"JHipster Registry"}),",\nusing an environment variable, or even a specific ",(0,i.jsx)(n.code,{children:"application-prod.yml"})," file which is SCP'd by a sysadmin into the same directory as your application's executable WAR file."]}),"\n",(0,i.jsxs)(n.li,{children:["You ",(0,i.jsx)(n.strong,{children:"should"}),' change the default "user" and "admin" passwords. The easiest way to do this is to deploy your application, login as "user/user" and then "admin/admin", and for each of them use the "Account > Password" menu to change the password.']}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"session-based-authentication",children:"Session-based authentication"}),"\n",(0,i.jsxs)(n.p,{children:['This is the "classical" Spring Security authentication mechanism, but we have improved it quite significantly. It uses the HTTP Session, so it is a stateful mechanism: if you plan to scale your application on multiple servers, you need to have a load balancer with sticky sessions so that each user stays on the same server or consider adding ',(0,i.jsx)(n.a,{href:"https://spring.io/projects/spring-session",children:"Spring Session"})," to store the sessions in a database rather than in memory."]}),"\n",(0,i.jsx)(n.h3,{id:"securing-session-based-authentication",children:"Securing Session-based authentication"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For remember-me authentication, the remember-me key is configured in the ",(0,i.jsx)(n.code,{children:"application-dev.yml"})," and ",(0,i.jsx)(n.code,{children:"application-prod.yml"})," files, as the ",(0,i.jsx)(n.code,{children:"jhipster.security.remember-me.key"})," property. As this key must be kept secret, you ",(0,i.jsx)(n.strong,{children:"should"})," store it in a secure way for your production profile. It can be set up using the usual Spring Boot property configuration: using a Spring Cloud Config server like the ",(0,i.jsx)(n.a,{href:"/jhipster-registry/",children:"JHipster Registry"}),", using an environment variable, or even a specific ",(0,i.jsx)(n.code,{children:"application-prod.yml"})," file which is SCP'd by a sysadmin into the same directory as your application's executable WAR file."]}),"\n",(0,i.jsxs)(n.li,{children:["You ",(0,i.jsx)(n.strong,{children:"should"}),' change the default "user" and "admin" passwords. The easiest way to do this is to deploy your application, login as "user/user" and then "admin/admin", and for each of them use the "Account > Password" menu to change the password.']}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"improved-remember-me-mechanism",children:"Improved remember-me mechanism"}),"\n",(0,i.jsx)(n.p,{children:"We have modified the Spring Security remember-me mechanism so that you have a unique token, that is stored in your database (SQL or NoSQL database, depending on your choice during generation!). We also store more information than the standard implementation, so you have a better understanding of where those tokens come from: IP address, browser, date... And we generate a complete administration screen, so that you can invalidate sessions, for example if you forgot to log out on another computer."}),"\n",(0,i.jsx)(n.h3,{id:"cookie-theft-protection",children:"Cookie theft protection"}),"\n",(0,i.jsx)(n.p,{children:"We have added a very complete cookie theft protection mechanism: we store your security information in a cookie, as well as in the database, and each time a user logs in we modify those values and check if they have been altered. That way, if someone ever steals your cookie, they will be able to use it only once, at most."}),"\n",(0,i.jsx)(n.h2,{id:"oauth-20-and-openid-connect",children:"OAuth 2.0 and OpenID Connect"}),"\n",(0,i.jsxs)(n.p,{children:["OAuth is a stateful security mechanism, like HTTP Session. Spring Security provides excellent OAuth 2.0 and OIDC support, and this is leveraged by JHipster. If you're not sure what OAuth and OpenID Connect (OIDC) are, please see ",(0,i.jsx)(n.a,{href:"https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth",children:"What the Heck is OAuth?"})]}),"\n",(0,i.jsx)(n.h3,{id:"keycloak",children:"Keycloak"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.keycloak.org",children:"Keycloak"})," is the default OpenID Connect server configured with JHipster."]}),"\n",(0,i.jsxs)(n.p,{children:["To log into your application, you'll need to have ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org",children:"Keycloak"})," up and running. The JHipster Team has created a Docker container for you that has the default users and roles. Start Keycloak using the following command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"docker-compose -f src/main/docker/keycloak.yml up\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, you can use ",(0,i.jsx)(n.code,{children:"npm"})," as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"npm run docker:keycloak:up\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to use Keycloak with Docker Compose, be sure to read our ",(0,i.jsx)(n.a,{href:"/docker-compose/",children:"Docker Compose documentation"}),", and configure correctly your ",(0,i.jsx)(n.code,{children:"/etc/hosts"})," for Keycloak."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Note for JHipster 7.8.1 and Keycloak 16.1.0 on Apple Silicon (M1)"})}),(0,i.jsx)(n.p,{children:"Keycloak prior to v18 may misbehave on Apple Silicon in compatibility mode and the solution is not obvious. You can build the Keycloak image locally to solve the problem:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git clone git@github.com:keycloak/keycloak-containers.git\ncd keycloak-containers/server\ngit checkout 16.1.0\ndocker build -t jboss/keycloak:16.1.0 .\n"})})]}),"\n",(0,i.jsxs)(n.p,{children:["The security settings in ",(0,i.jsx)(n.code,{children:"src/main/resources/config/application.yml"})," are configured for this image. See above note on ",(0,i.jsx)(n.code,{children:"/etc/hosts"})," and take note that ",(0,i.jsx)(n.code,{children:"issuer-uri"})," may need to change"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spring:\n  ...\n  security:\n    oauth2:\n      client:\n        provider:\n          oidc:\n            issuer-uri: http://localhost:9080/auth/realms/jhipster\n            # localhost will be bound to the guest (container), not the host\n            # to run Keycloak as a daemon, i.e., npm run docker:keycloak:up, /etc/hosts must be edited\n            # and the issuer-uri should be as follows:\n            # issuer-uri: http://keycloak:9080/auth/realms/jhipster\n        registration:\n          oidc:\n            client-id: web_app\n            client-secret: web_app\n            scope: openid,profile,email\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Keycloak uses an embedded H2 database by default, so you will lose the created users if you restart your Docker container. To keep your data, please read the ",(0,i.jsx)(n.a,{href:"https://hub.docker.com/r/jboss/keycloak/",children:"Keycloak Docker documentation"}),". One solution, with keeping the H2 database, is to do the following:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add a volume that will be persisted: ",(0,i.jsx)(n.code,{children:"./keycloak-db:/opt/jboss/keycloak/standalone/data"})]}),"\n",(0,i.jsxs)(n.li,{children:["Change the migration strategy from ",(0,i.jsx)(n.code,{children:"OVERWRITE_EXISTING"}),", to ",(0,i.jsx)(n.code,{children:"IGNORE_EXISTING"})," (in the command section)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In production, it is required by Keycloak that you use HTTPS. There are several ways to achieve this, including using a reverse proxy or load balancer that will manage HTTPS. We recommend that you read the ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org/docs/latest/server_installation/index.html#setting-up-https-ssl",children:"Keycloak HTTPS documentation"})," to learn more about this topic."]}),"\n",(0,i.jsx)(n.h3,{id:"auth0",children:"Auth0"}),"\n",(0,i.jsxs)(n.p,{children:["If you'd like to use ",(0,i.jsx)(n.a,{href:"https://auth0.com/",children:"Auth0"})," instead of Keycloak, follow the configuration steps below:"]}),"\n",(0,i.jsx)(n.h4,{id:"create-an-oidc-app-using-auth0-admin-dashboard",children:"Create an OIDC App using Auth0 Admin Dashboard"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a free developer account at ",(0,i.jsx)(n.a,{href:"https://auth0.com/signup",children:"https://auth0.com/signup"}),". After successful sign-up, your account shall be associated with a unique domain like ",(0,i.jsx)(n.code,{children:"dev-xxx.us.auth0.com"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a new application of type ",(0,i.jsx)(n.code,{children:"Regular Web Applications"}),". Switch to the ",(0,i.jsx)(n.code,{children:"Settings"})," tab, and configure your application settings like:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Allowed Callback URLs: ",(0,i.jsx)(n.code,{children:"http://localhost:8080/login/oauth2/code/oidc"})]}),"\n",(0,i.jsxs)(n.li,{children:["Allowed Logout URLs: ",(0,i.jsx)(n.code,{children:"http://localhost:8080/"})]}),"\n",(0,i.jsx)(n.li,{children:"NOTE: If you're using Consul, add URLs for port 8500 too."}),"\n",(0,i.jsx)(n.li,{children:"NOTE: If you're using the JHipster Registry, add URLs for port 8761 too."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Navigate to ",(0,i.jsx)(n.strong,{children:"User Management"})," > ",(0,i.jsx)(n.strong,{children:"Roles"})," and create new roles named ",(0,i.jsx)(n.code,{children:"ROLE_ADMIN"}),", and ",(0,i.jsx)(n.code,{children:"ROLE_USER"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Navigate to ",(0,i.jsx)(n.strong,{children:"User Management"})," > ",(0,i.jsx)(n.strong,{children:"Users"})," and create a new user account. Click on the ",(0,i.jsx)(n.strong,{children:"Role"})," tab to assign roles to the newly created user account."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Navigate to ",(0,i.jsx)(n.strong,{children:"Actions"})," > ",(0,i.jsx)(n.strong,{children:"Flows"})," and select ",(0,i.jsx)(n.strong,{children:"Login"}),". Create a new action named ",(0,i.jsx)(n.code,{children:"Add Roles"})," and use the default trigger and runtime. Change the ",(0,i.jsx)(n.code,{children:"onExecutePostLogin"})," handler to be as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"exports.onExecutePostLogin = async (event, api) => {\n  const namespace = 'https://www.jhipster.tech';\n  if (event.authorization) {\n    api.idToken.setCustomClaim('preferred_username', event.user.email);\n    api.idToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n    api.accessToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n  }\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Select ",(0,i.jsx)(n.strong,{children:"Deploy"})," and drag the ",(0,i.jsx)(n.code,{children:"Add Roles"})," action to your Login flow."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["If you'd like to have all these steps automated for you, add a \ud83d\udc4d to ",(0,i.jsx)(n.a,{href:"https://github.com/auth0/auth0-cli/issues/351",children:"issue #351"})," in the Auth0 CLI project."]})}),"\n",(0,i.jsx)(n.h4,{id:"configure-jhipster-application-to-use-auth0-as-oidc-provider",children:"Configure JHipster Application to use Auth0 as OIDC Provider"}),"\n",(0,i.jsxs)(n.p,{children:["In your ",(0,i.jsx)(n.code,{children:"JHipster"})," application, modify ",(0,i.jsx)(n.code,{children:"src/main/resources/config/application.yml"})," to use your Auth0 settings:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spring:\n  ...\n  security:\n    oauth2:\n      client:\n        provider:\n          oidc:\n            # make sure to include the ending slash!\n            issuer-uri: https://{your-auth0-domain}/\n        registration:\n          oidc:\n            client-id: {clientId}\n            client-secret: {clientSecret}\n            scope: openid,profile,email,offline_access\njhipster:\n  security:\n    oauth2:\n      audience: https://{your-auth0-domain}/api/v2/\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you have a doubt on the ",(0,i.jsx)(n.code,{children:"issuer-uri"})," value, then, you can get the value from ",(0,i.jsx)(n.strong,{children:"Applications"})," > ",(0,i.jsx)(n.strong,{children:"{Your Application}"})," > ",(0,i.jsx)(n.strong,{children:"Settings"})," > ",(0,i.jsx)(n.strong,{children:"Advanced Settings"})," > ",(0,i.jsx)(n.strong,{children:"Endpoints"})," > ",(0,i.jsx)(n.strong,{children:"OpenID Configuration"}),". Remove ",(0,i.jsx)(n.code,{children:".well-known/openid-configuration"})," suffix since that will be added by the Spring Security."]}),"\n",(0,i.jsxs)(n.p,{children:["You can use the default ",(0,i.jsx)(n.code,{children:"Auth0 Management API"})," audience value from the ",(0,i.jsx)(n.strong,{children:"Applications"})," > ",(0,i.jsx)(n.strong,{children:"API"})," > ",(0,i.jsx)(n.strong,{children:"API Audience"})," field. You can also define your own custom API and use the identifier as the API audience."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Before running ",(0,i.jsx)(n.code,{children:"Cypress"})," tests, specify ",(0,i.jsx)(n.code,{children:"Auth0"})," user details by overriding the ",(0,i.jsx)(n.code,{children:"CYPRESS_E2E_USERNAME"})," and ",(0,i.jsx)(n.code,{children:"CYPRESS_E2E_PASSWORD"})," environment variables. Refer to ",(0,i.jsx)(n.a,{href:"https://docs.cypress.io/guides/guides/environment-variables#Setting",children:"Cypress documentation"})," for more details."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"export CYPRESS_E2E_USERNAME=<your-username>\nexport CYPRESS_E2E_PASSWORD=<your-password>\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Note"}),": Auth0 requires a user to provide authorization consent on the first login. Consent flow is currently not handled in the Cypress test suite. To mitigate the issue, you can use a user account that has already granted consent to authorize application access via interactive login."]}),"\n",(0,i.jsx)(n.h4,{id:"use-environment-variables",children:"Use Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"You can also use environment variables to override the defaults. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'export SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI="https://{your-auth0-domain}/"\nexport SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID="{client-id}"\nexport SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET="{client-secret}"\nexport JHIPSTER_SECURITY_OAUTH2_AUDIENCE="https://{your-auth0-domain}/api/v2/"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can put this in an ",(0,i.jsx)(n.code,{children:"~/.auth0.env"})," file and run ",(0,i.jsx)(n.code,{children:"source ~/.auth0.env"})," to override the default Keycloak settings with Auth0 and start your app with Maven or Gradle. You should be able to sign in with the credentials you registered with."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Note"}),": If you're on ",(0,i.jsx)(n.code,{children:"Windows"}),", you should install ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/windows/wsl/install-win10",children:"WSL"})," so the ",(0,i.jsx)(n.code,{children:"source"})," command will work."]}),"\n",(0,i.jsx)("a",{name:"create-native-app-auth0"}),"\n",(0,i.jsx)(n.h4,{id:"create-a-native-app-for-mobile-on-auth0",children:"Create a Native App for Mobile on Auth0"}),"\n",(0,i.jsxs)(n.p,{children:["If you're developing a mobile app with JHipster's ",(0,i.jsx)(n.a,{href:"https://github.com/jhipster/generator-jhipster-ionic",children:"Ionic"})," or ",(0,i.jsx)(n.a,{href:"https://github.com/jhipster/generator-jhipster-react-native",children:"React Native"})," blueprints, you will need to create a native app on Auth0 if you're using OIDC."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.strong,{children:"Native"})," app and add the following Allowed Callback URLs:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ionic: ",(0,i.jsx)(n.code,{children:"http://localhost:8100/callback,dev.localhost.ionic:/callback"})]}),"\n",(0,i.jsxs)(n.li,{children:["React Native: ",(0,i.jsx)(n.code,{children:"http://localhost:19006/,https://auth.expo.io/@<username>/<appname>"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Set the Allowed Logout URLs to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ionic: ",(0,i.jsx)(n.code,{children:"http://localhost:8100/logout,dev.localhost.ionic:/logout"})]}),"\n",(0,i.jsxs)(n.li,{children:["React: ",(0,i.jsx)(n.code,{children:"http://localhost:19006/,https://auth.expo.io/@<username>/<appname>"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Set the Allowed Origins (CORS):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ionic: ",(0,i.jsx)(n.code,{children:"http://localhost:8100,capacitor://localhost,http://localhost"})]}),"\n",(0,i.jsxs)(n.li,{children:["React Native: ",(0,i.jsx)(n.code,{children:"http://localhost:19006"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"update-your-ionic-app",children:"Update Your Ionic App"}),"\n",(0,i.jsxs)(n.p,{children:["Update ",(0,i.jsx)(n.code,{children:"ionic/src/environments/environment.ts"})," to use the generated client ID. The value for ",(0,i.jsx)(n.code,{children:"server_host"})," will be looked up from your JHipster app (at ",(0,i.jsx)(n.code,{children:"/api/auth-info"}),"), but you can define it as a fallback value. You'll also need to specify the audience. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const oidcConfig: IAuthConfig = {\n  client_id: '<native-client-id>',\n  server_host: 'https://<your-auth0-domain>/',\n  ...\n};\n\nexport const environment = {\n  ...\n  audience: 'https://<your-auth0-domain>/api/v2/',\n  ...\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Restart your Ionic app and log in with Auth0!"}),"\n",(0,i.jsx)(n.h4,{id:"update-your-react-native-app",children:"Update Your React Native App"}),"\n",(0,i.jsxs)(n.p,{children:["Copy the client ID to ",(0,i.jsx)(n.code,{children:"app/config/app-config.js"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Update the ",(0,i.jsx)(n.code,{children:"audience"})," in ",(0,i.jsx)(n.code,{children:"app/modules/login/login.utils.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"audience: 'https://<your-auth0-domain>/api/v2/',\n"})}),"\n",(0,i.jsx)(n.p,{children:"Restart your React Native app and log in with Auth0!"}),"\n",(0,i.jsx)(n.h3,{id:"okta",children:"Okta"}),"\n",(0,i.jsxs)(n.p,{children:["If you'd like to use Okta instead of Keycloak, it's pretty quick using the ",(0,i.jsx)(n.a,{href:"https://cli.okta.com/",children:"Okta CLI"}),". After you've installed it, run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"okta register\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, in your JHipster app's directory, run ",(0,i.jsx)(n.code,{children:"okta apps create jhipster"}),". This will set up an Okta app for you, create ",(0,i.jsx)(n.code,{children:"ROLE_ADMIN"})," and ",(0,i.jsx)(n.code,{children:"ROLE_USER"})," groups, create a ",(0,i.jsx)(n.code,{children:".okta.env"})," file with your Okta settings, and configure a ",(0,i.jsx)(n.code,{children:"groups"})," claim in your ID token."]}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"source .okta.env"})," and start your app with Maven or Gradle. You should be able to sign in with the credentials you registered with."]}),"\n",(0,i.jsxs)(n.p,{children:["If you're on Windows, you should install ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/windows/wsl/install-win10",children:"WSL"})," so the ",(0,i.jsx)(n.code,{children:"source"})," command will work."]}),"\n",(0,i.jsx)(n.p,{children:"If you'd like to configure things manually through the Okta Admin Console, see the instructions below."}),"\n",(0,i.jsx)(n.h4,{id:"create-an-oidc-app-with-the-okta-admin-console",children:"Create an OIDC App with the Okta Admin Console"}),"\n",(0,i.jsxs)(n.p,{children:["First, you'll need to create a free developer account at ",(0,i.jsx)(n.a,{href:"https://developer.okta.com/signup",children:"https://developer.okta.com/signup"}),". After doing so, you'll get your own Okta domain, that has a name like ",(0,i.jsx)(n.code,{children:"https://dev-123456.okta.com"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Modify ",(0,i.jsx)(n.code,{children:"src/main/resources/config/application.yml"})," to use your Okta settings. Hint: replace ",(0,i.jsx)(n.code,{children:"{yourOktaDomain}"})," with your org's name (e.g., ",(0,i.jsx)(n.code,{children:"dev-123456.okta.com"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"security:\n  oauth2:\n    client:\n      provider:\n        oidc:\n          issuer-uri: https://{yourOktaDomain}/oauth2/default\n      registration:\n        oidc:\n          client-id: {client-id}\n          client-secret: {client-secret}\n          scope: openid,profile,email\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Create an OIDC App in Okta to get a ",(0,i.jsx)(n.code,{children:"{client-id}"})," and ",(0,i.jsx)(n.code,{children:"{client-secret}"}),". To do this, log in to your Okta Developer account and navigate to ",(0,i.jsx)(n.strong,{children:"Applications"})," > ",(0,i.jsx)(n.strong,{children:"Applications"})," > ",(0,i.jsx)(n.strong,{children:"Add Application"})," > ",(0,i.jsx)(n.strong,{children:"Create New App"}),". Select ",(0,i.jsx)(n.strong,{children:"Web"}),", ",(0,i.jsx)(n.strong,{children:"OpenID Connect"}),", and click ",(0,i.jsx)(n.strong,{children:"Create"}),". Give the app a name you'll remember, and specify ",(0,i.jsx)(n.code,{children:"http://localhost:8080/login/oauth2/code/oidc"})," as a Login redirect URI. Add ",(0,i.jsx)(n.code,{children:"http://localhost:8080"})," as a Logout redirect URI and click ",(0,i.jsx)(n.strong,{children:"Save"}),". Copy the client ID and secret into your ",(0,i.jsx)(n.code,{children:"application.yml"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"ROLE_ADMIN"})," and ",(0,i.jsx)(n.code,{children:"ROLE_USER"})," group (",(0,i.jsx)(n.strong,{children:"Directory"})," > ",(0,i.jsx)(n.strong,{children:"Groups"})," > ",(0,i.jsx)(n.strong,{children:"Add Group"}),") and add users to them. You can use the account you signed up with, or create a new user (",(0,i.jsx)(n.strong,{children:"Directory"})," > ",(0,i.jsx)(n.strong,{children:"People"})," > ",(0,i.jsx)(n.strong,{children:"Add Person"}),"). Navigate to ",(0,i.jsx)(n.strong,{children:"Security"})," > ",(0,i.jsx)(n.strong,{children:"API"})," > ",(0,i.jsx)(n.strong,{children:"Authorization Servers"}),", and click on the ",(0,i.jsx)(n.code,{children:"default"})," server. Click the ",(0,i.jsx)(n.strong,{children:"Claims"})," tab and ",(0,i.jsx)(n.strong,{children:"Add Claim"}),". Name it ",(0,i.jsx)(n.code,{children:"groups"}),", and include it in the ID Token. Set the value type to ",(0,i.jsx)(n.code,{children:"Groups"})," and set the filter to be a Regex of ",(0,i.jsx)(n.code,{children:".*"}),". Click ",(0,i.jsx)(n.strong,{children:"Create"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Add Claim",src:t(70068).A+"",width:"1390",height:"1102"})}),"\n",(0,i.jsxs)(n.p,{children:["After making these changes, you should be good to go! If you have any issues, please post them to ",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/tagged/jhipster",children:"Stack Overflow"}),'. Make sure to tag your question with "jhipster" and "okta".']}),"\n",(0,i.jsx)(n.p,{children:"To use Okta when running e2e tests, you can set environment variables."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"export CYPRESS_E2E_USERNAME=<your-username>\nexport CYPRESS_E2E_PASSWORD=<your-password>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you're using Protractor, remove the ",(0,i.jsx)(n.code,{children:"CYPRESS_"})," prefix."]}),"\n",(0,i.jsx)(n.h4,{id:"use-environment-variables-1",children:"Use Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"You can also use environment variables to override the defaults. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'export SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI="https://{yourOktaDomain}/oauth2/default"\nexport SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID="{client-id}"\nexport SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET="{client-secret}"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can put this in an ",(0,i.jsx)(n.code,{children:"~/.okta.env"})," file and run ",(0,i.jsx)(n.code,{children:"source ~/.okta.env"})," to override Keycloak with Okta."]}),"\n",(0,i.jsx)(n.p,{children:"You can then set these properties when you deploy to Heroku:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'heroku config:set \\\n  SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI="$SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI" \\\n  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID="$SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID" \\\n  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET="$SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET"\n'})}),"\n",(0,i.jsx)("a",{name:"create-native-app-okta"}),"\n",(0,i.jsx)(n.h4,{id:"create-a-native-app-for-mobile-on-okta",children:"Create a Native App for Mobile on Okta"}),"\n",(0,i.jsxs)(n.p,{children:["If you're developing a mobile app with JHipster's ",(0,i.jsx)(n.a,{href:"https://github.com/jhipster/generator-jhipster-ionic",children:"Ionic"})," or ",(0,i.jsx)(n.a,{href:"https://github.com/jhipster/generator-jhipster-react-native",children:"React Native"})," blueprints, you will need to create a native app on Okta if you're using OIDC."]}),"\n",(0,i.jsxs)(n.p,{children:["Using the ",(0,i.jsx)(n.a,{href:"https://cli.okta.com",children:"Okta CLI"}),", run ",(0,i.jsx)(n.code,{children:"okta apps create"}),". Select the default app name, or change it as you see fit. Choose ",(0,i.jsx)(n.strong,{children:"Native"})," and press ",(0,i.jsx)(n.strong,{children:"Enter"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ionic"}),": Change the Redirect URI to ",(0,i.jsx)(n.code,{children:"[http://localhost:8100/callback,dev.localhost.ionic:/callback]"})," and the Logout Redirect URI to ",(0,i.jsx)(n.code,{children:"[http://localhost:8100/logout,dev.localhost.ionic:/logout]"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"React Native"}),": Use ",(0,i.jsx)(n.code,{children:"[http://localhost:19006/,https://auth.expo.io/@<username>/<appname>]"})," for redirect URIs."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE:"})," ",(0,i.jsx)(n.code,{children:"dev.localhost.ionic"})," is the default scheme, but you can also use something more traditional like ",(0,i.jsx)(n.code,{children:"com.okta.dev-133337"})," (where ",(0,i.jsx)(n.code,{children:"dev-133337.okta.com"})," is your Okta Org URL). If you change it, be sure to update the ",(0,i.jsx)(n.code,{children:"scheme"})," in your Ionic app's ",(0,i.jsx)(n.code,{children:"src/environments/environment.ts"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The Okta CLI will create an OIDC App in your Okta Org. It will add the redirect URIs you specified and grant access to the Everyone group."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"Okta application configuration:\nIssuer:    https://dev-133337.okta.com/oauth2/default\nClient ID: 0oab8eb55Kb9jdMIr5d6\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE"}),": You can also use the Okta Admin Console to create your app. See ",(0,i.jsx)(n.a,{href:"https://developer.okta.com/docs/guides/sign-into-mobile-app/create-okta-application/",children:"Create a Native App"})," for more information."]}),"\n",(0,i.jsx)(n.h4,{id:"update-your-ionic-app-1",children:"Update Your Ionic App"}),"\n",(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.code,{children:"ionic/src/environments/environment.ts"})," and add the client ID from your Native app. The value for ",(0,i.jsx)(n.code,{children:"server_host"})," will be looked up from your JHipster app (at ",(0,i.jsx)(n.code,{children:"/api/auth-info"}),"), but you can define it as a fallback value. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"oidcConfig: {\n  client_id: '<native-client-id>',\n  server_host: 'https://<your-okta-domain>/oauth2/default',\n  ...\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You'll also need to add a trusted origin for ",(0,i.jsx)(n.code,{children:"http://localhost:8100"}),". In your Okta Admin Console, go to ",(0,i.jsx)(n.strong,{children:"Security"})," > ",(0,i.jsx)(n.strong,{children:"API"})," > ",(0,i.jsx)(n.strong,{children:"Trusted Origins"})," > ",(0,i.jsx)(n.strong,{children:"Add Origin"}),". Use the following values:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Name: ",(0,i.jsx)(n.code,{children:"http://localhost:8100"})]}),"\n",(0,i.jsxs)(n.li,{children:["Origin URL: ",(0,i.jsx)(n.code,{children:"http://localhost:8100"})]}),"\n",(0,i.jsxs)(n.li,{children:["Type: Check ",(0,i.jsx)(n.strong,{children:"both"})," CORS and Redirect"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Click ",(0,i.jsx)(n.strong,{children:"Save"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Restart your Ionic app and log in with Okta!"}),"\n",(0,i.jsx)(n.h4,{id:"update-your-react-native-app-1",children:"Update Your React Native App"}),"\n",(0,i.jsxs)(n.p,{children:["Copy the client ID to ",(0,i.jsx)(n.code,{children:"app/config/app-config.js"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Restart your Ionic app and log in with Okta!"}),"\n",(0,i.jsx)(n.h4,{id:"openid-connect-tutorials",children:"OpenID Connect Tutorials"}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"https://developer.okta.com/blog/2017/10/20/oidc-with-jhipster",children:"Use OpenID Connect Support with JHipster"})," to learn more about JHipster 5 and OIDC with Okta."]}),"\n",(0,i.jsxs)(n.p,{children:["If you're using JHipster 6, see ",(0,i.jsx)(n.a,{href:"https://developer.okta.com/blog/2019/04/04/java-11-java-12-jhipster-oidc",children:"Better, Faster, Lighter Java with Java 12 and JHipster 6"}),". If you're using microservices with JHipster 6, see ",(0,i.jsx)(n.a,{href:"https://developer.okta.com/blog/2019/05/23/java-microservices-spring-cloud-config",children:"Java Microservices with Spring Cloud Config and JHipster"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For JHipster 7, see ",(0,i.jsx)(n.a,{href:"https://developer.okta.com/blog/2021/01/20/reactive-java-microservices",children:"Reactive Java Microservices with Spring Boot and JHipster"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The Okta developer blog also has some \u2764\ufe0f for Micronaut and Quarkus:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.okta.com/blog/2020/08/17/micronaut-jhipster-heroku",children:"Build a Secure Micronaut and Angular App with JHipster"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.okta.com/blog/2021/03/08/jhipster-quarkus-oidc",children:"Fast Java Made Easy with Quarkus and JHipster"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"https",children:"HTTPS"}),"\n",(0,i.jsxs)(n.p,{children:["You can force the use of HTTPS by adding the following configuration to your ",(0,i.jsx)(n.code,{children:"SecurityConfiguration.java"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Spring MVC\nhttp.requiresChannel(channel -> channel\n    .requestMatchers(r -> r.getHeader("X-Forwarded-Proto") != null).requiresSecure());\n    \n// WebFlux\nhttp.redirectToHttps(redirect -> redirect\n    .httpsRedirectWhen(e -> e.getRequest().getHeaders().containsKey("X-Forwarded-Proto")));\n'})}),"\n",(0,i.jsxs)(n.p,{children:["See Spring Security's ",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-security/site/docs/5.5.x/reference/html5/#servlet-http-redirect",children:"Servlet"})," and ",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-security/site/docs/5.5.x/reference/html5/#webflux-http-redirect",children:"WebFlux"})," documentation for more information."]}),"\n",(0,i.jsxs)(n.p,{children:["This has been tested and known to work on Heroku and Google Cloud. For more production tips on Heroku, see ",(0,i.jsx)(n.a,{href:"https://devcenter.heroku.com/articles/preparing-a-spring-boot-app-for-production-on-heroku",children:"Preparing a Spring Boot App for Production on Heroku"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"leakage-of-implementation-details",children:"Leakage of implementation details"}),"\n",(0,i.jsxs)(n.p,{children:["Every failure/exception is mapped to a ",(0,i.jsx)(n.a,{href:"https://github.com/zalando/problem",children:"problem datastructure"})," and returned to the client."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{  \n  "type": "https://www.jhipster.tech/problem/problem-with-message",\n  "title": "Service Unavailable",\n  "status": 503,\n  "detail": "Database not reachable"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["While JHipster does not include any stacktraces by default the ",(0,i.jsx)(n.code,{children:"detail"})," contains the ",(0,i.jsx)(n.code,{children:"message"})," of an exception which might ",(0,i.jsx)(n.a,{href:"https://github.com/jhipster/generator-jhipster/issues/12051",children:"reveal\ntechnical details"})," you do not want to be exposed via the API."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{  \n  "type": "https://www.jhipster.tech/problem/problem-with-message",\n  "title": "Bad Request",\n  "status": 400,\n  "detail": "JSON parse error: Cannot deserialize instance of \n       `java.util.LinkedHashMap<java.lang.Object,java.lang.Object>` out of VALUE_NUMBER_INT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.LinkedHashMap<java.lang.Object,java.lang.Object>` \n       out of VALUE_NUMBER_INT token\\n at [Source: (PushbackInputStream); line: 1, column: 1]"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"To prevent this JHipster provides a dedicated mechanism to mitigate leakage of implementation details by"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["checking well known exception and replacing the message with a generic message (e.g. ",(0,i.jsx)(n.code,{children:"Unable to convert http message"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["checking if the message contain potential package names (e.g. ",(0,i.jsx)(n.code,{children:"java."})," or ",(0,i.jsx)(n.code,{children:".org"}),") and replacing the message with a generic one (e.g. ",(0,i.jsx)(n.code,{children:"Unexpected runtime exception"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The logs still contain the detailed exception so you can still identify the real issue while an attacker from the outside is not able to\ngain valuable technical details by miusing your api."}),"\n",(0,i.jsxs)(n.p,{children:["In case you need to modify the logic (e.g. the message still contains technical details but was not detected) you can do so by\nadding the required logic to the ",(0,i.jsx)(n.code,{children:"prepare"})," method in ",(0,i.jsx)(n.code,{children:"ExceptionTranslator.java"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},70068:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/security-add-claim-5f3a927326393f48c582258ffa9edb0d.png"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);