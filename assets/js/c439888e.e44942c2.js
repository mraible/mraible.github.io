"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[831],{66786:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=s(74848),i=s(28453);const a={title:"Using Elasticsearch",slug:"/using-elasticsearch/",last_update:{date:new Date("2023-07-12T00:00:00.000Z")}},r=void 0,o={id:"options/using-elasticsearch",title:"Using Elasticsearch",description:"Elasticsearch is an option that adds search capabilities on top of your database.",source:"@site/docs/options/using-elasticsearch.mdx",sourceDirName:"options",slug:"/using-elasticsearch/",permalink:"/using-elasticsearch/",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/options/using-elasticsearch.mdx",tags:[],version:"current",lastUpdatedAt:168912e7,frontMatter:{title:"Using Elasticsearch",slug:"/using-elasticsearch/",last_update:{date:"2023-07-12T00:00:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Filtering your entities",permalink:"/entities-filtering/"},next:{title:"Using Websockets",permalink:"/using-websockets/"}},c={},l=[{value:"Using in Development",id:"using-in-development",level:2},{value:"Using in Production",id:"using-in-production",level:2},{value:"Using on Heroku",id:"using-on-heroku",level:2},{value:"Using Elastic Cloud",id:"using-elastic-cloud",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Elasticsearch is an option that adds search capabilities on top of your database."}),"\n",(0,t.jsx)(n.p,{children:"This option has some limitations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"It only works with SQL databases and MongoDB. Cassandra and Couchbase support will be added in the future (help is welcome!)."}),"\n",(0,t.jsxs)(n.li,{children:["There is no automatic replication mechanism between your database and Elasticsearch, so you might have out-of-sync data. As a result, you will probably need to write some specific code to synchronize your data, for example using the Spring ",(0,t.jsx)(n.code,{children:"@Scheduled"})," annotation, to run every evening.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This also means if your database is changed outside of your application, your search indexes will be out-of-sync. The ",(0,t.jsx)(n.a,{href:"https://www.jhipster.tech/modules/marketplace/#/details/generator-jhipster-elasticsearch-reindexer",children:"Elasticsearch Reindexer"})," JHipster module can help in these situations."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When the Elasticsearch option is selected:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Spring Data Elasticsearch is used with Spring Boot's autoconfiguration. It can be configured using ",(0,t.jsx)(n.code,{children:"spring.elasticsearch.*"})," configuration properties."]}),"\n",(0,t.jsx)(n.li,{children:'The "repository" package has a new subpackage, called "search", that holds all Elasticsearch repositories.'}),"\n",(0,t.jsxs)(n.li,{children:['The "User" entity gets indexed in Elasticsearch, and you can query it using the ',(0,t.jsx)(n.code,{children:"/api/_search/users/:query"})," REST endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:["When the ",(0,t.jsx)(n.a,{href:"/creating-an-entity",children:"entity sub-generator"})," is used, the generated entity gets automatically indexed by Elasticsearch, and is used in the REST endpoint. Search capabilities are also added to the UI, so you can search your entity in the main CRUD screen."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"using-in-development",children:"Using in Development"}),"\n",(0,t.jsxs)(n.p,{children:["In development, JHipster runs with an embedded Elasticsearch instance. You can also use an external Elasticsearch instance if you set a ",(0,t.jsx)(n.code,{children:"SPRING_DATA_URIS"})," environment variable (or add a ",(0,t.jsx)(n.code,{children:"spring.elasticsearch.uris"})," property to your ",(0,t.jsx)(n.code,{children:"application-dev.yml"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"The easiest way to run an external Elasticsearch instance is to use the provided Docker Compose configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker-compose -f src/main/docker/elasticsearch.yml up -d\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then set an environment variable to point to it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"export SPRING_DATA_URIS=http://localhost:9200\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-in-production",children:"Using in Production"}),"\n",(0,t.jsxs)(n.p,{children:["In production, JHipster expects an external Elasticsearch instance. By default, the application looks for an Elasticsearch instance running on localhost. This can be configured by using the standard Spring Boot properties, in the ",(0,t.jsx)(n.code,{children:"application-prod.yml"})," file."]}),"\n",(0,t.jsx)(n.h2,{id:"using-on-heroku",children:"Using on Heroku"}),"\n",(0,t.jsxs)(n.p,{children:["On Heroku, the ",(0,t.jsx)(n.a,{href:"https://elements.heroku.com/addons/bonsai",children:"Bonsai Elasticsearch"})," is configured as an add-on. JHipster is automatically configured to talk to it."]}),"\n",(0,t.jsxs)(n.p,{children:["Unfortunately, as of JHipster 7.9.3, Elasticsearch ",(0,t.jsx)(n.a,{href:"https://github.com/jhipster/generator-jhipster/issues/20315",children:"doesn't work out of the box with Heroku"}),". To solve this, you can create a Docker image with Elasticsearch and deploy it to somewhere that can run it, or you can use Elastic Cloud. We don't automatically configure the ",(0,t.jsx)(n.a,{href:"https://elements.heroku.com/addons/foundelasticsearch",children:"Elasticsearch Add-on"})," because its cheapest plan is 67 USD/month and that seems a little expensive."]}),"\n",(0,t.jsx)(n.h2,{id:"using-elastic-cloud",children:"Using Elastic Cloud"}),"\n",(0,t.jsxs)(n.p,{children:["You can ",(0,t.jsx)(n.a,{href:"https://cloud.elastic.co/registration",children:"start a free trial"})," on Elastic Cloud. After logging in, create a deployment. Use the default settings, select ",(0,t.jsx)(n.strong,{children:"7.17.7"})," as the version, and press ",(0,t.jsx)(n.strong,{children:"Create deployment"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"WARNING"}),': Using the latest version will result in an "Unable to parse response body" error.']}),"\n",(0,t.jsxs)(n.p,{children:["Download your credentials from the next screen and click ",(0,t.jsx)(n.strong,{children:"Continue"}),". Then, select ",(0,t.jsx)(n.strong,{children:"Manage this deployment"})," from the menu and copy the Elasticsearch endpoint."]}),"\n",(0,t.jsxs)(n.p,{children:["Set the credentials and endpoint URL as a new ",(0,t.jsx)(n.code,{children:"ELASTIC_URL"})," environment variable on Heroku."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"heroku config:set ELASTIC_URL=https://elastic:<password>@<endpoint-url>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then, modify ",(0,t.jsx)(n.code,{children:"heroku.gradle"})," to remove the workaround for Bonsai (that no longer works) and update ",(0,t.jsx)(n.code,{children:"application-heroku.yml"})," to use ",(0,t.jsx)(n.code,{children:"ELASTIC_URL"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"spring:\n  ...\n  elasticsearch:\n    uris: ${ELASTIC_URL}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Redeploy your application to Heroku and everything should work as expected."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(96540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);