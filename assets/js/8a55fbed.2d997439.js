"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[3379],{56616:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var i=n(74848),r=n(28453);const a={title:"LDAP Authentication",slug:"/tips/016_tip_ldap_authentication.html",last_update:{date:new Date("2019-11-11T22:22:00.000Z")}},o=void 0,s={id:"tips/tip_ldap_authentication",title:"LDAP Authentication",description:"Tip submitted by @mleneveut updated by @patrickjp93",source:"@site/docs/tips/016_tip_ldap_authentication.mdx",sourceDirName:"tips",slug:"/tips/016_tip_ldap_authentication.html",permalink:"/tips/016_tip_ldap_authentication.html",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/tips/016_tip_ldap_authentication.mdx",tags:[],version:"current",lastUpdatedAt:157351092e4,sidebarPosition:16,frontMatter:{title:"LDAP Authentication",slug:"/tips/016_tip_ldap_authentication.html",last_update:{date:"2019-11-11T22:22:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Local SMTP Server",permalink:"/tips/015_tip_local_smtp_server.html"},next:{title:"REPL with the remote shell (deprecated)",permalink:"/tips/017_tip_repl_with_the_remote_shell.html"}},c={},u=[];function l(e){const t={a:"a",code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:["Tip submitted by ",(0,i.jsx)(t.a,{href:"https://github.com/mleneveut",children:"@mleneveut"})]})," updated by ",(0,i.jsx)(t.a,{href:"https://github.com/patrickjp93",children:"@patrickjp93"}),"__"]}),"\n",(0,i.jsx)(t.p,{children:"To add an LDAP authentication to your JHipster application, follow these steps :"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Add the dependencies spring-ldap-core and spring-security-ldap. Example for gradle in build.gradle :"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"compile group: 'org.springframework.security', name: 'spring-security-ldap', version: spring_security_version\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Modify the SecurityConfiguration.java, add method configureGlobal(AuthenticationManagerBuilder auth) and getContextSource()"}),"\n",(0,i.jsxs)(t.li,{children:["The following query strings should ideally be ",(0,i.jsx)(t.a,{href:"https://github.com/eugenp/tutorials/blob/master/spring-ldap/src/main/java/com/baeldung/ldap/javaconfig/AppConfig.java",children:"encapsulated in environment variables"}),", or at the very least properties/yml files"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Inject\npublic void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n    auth.ldapAuthentication()\n        .userSearchBase("o=myO,ou=myOu") //don\'t add the base\n        .userSearchFilter("(uid={0})")\n        .groupSearchBase("ou=Groups") //don\'t add the base\n        .groupSearchFilter("member={0}")\n        .contextSource(getContextSource());\n}\n@Bean\npublic LdapContextSource getContextSource() {\n        LdapContextSource contextSource = new LdapContextSource();\n    contextSource.setUrl("ldap://[IP goes here]:[port goes here]");\n    contextSource.setBase("dc=mycompany,dc=com");\n    contextSource.setUserDn("cn=aUserUid,dc=mycompany,dc=com");\n    contextSource.setPassword("hisPassword");\n    contextSource.afterPropertiesSet(); //needed otherwise you will have a NullPointerException in spring\n\n    return contextSource;\n}\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Modify the SecurityUtils.java, method getCurrentUserLogin()"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"    } else if (authentication.getPrincipal() instanceof LdapUserDetails) {\n    \tLdapUserDetails ldapUser = (LdapUserDetails) authentication.getPrincipal();\n    \treturn ldapUser.getUsername();\n    }\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Add a new CustomAuthenticationManager class which implements the AuthenticationManager interface and override the authentication method in order to force the authentication process to authenticate the user through LDAP."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Component\npublic class CustomAuthenticationManager implements AuthenticationManager {\n\n    LdapAuthenticationProvider provider = null;\n\n    private static final Logger log = LoggerFactory.getLogger(CustomAuthenticationManager.class);\n\n    private final UserRepository userRepository;\n\n    @Autowired\n    private final LdapContextSource ldapContextSource;\n\n    public CustomAuthenticationManager(UserRepository userRepository, LdapContextSource ldapContextSource) {\n        this.userRepository = userRepository;\n        this.ldapContextSource = ldapContextSource;\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) {\n        log.debug("AUTHENTICATION Login" + authentication.getName());\n        log.debug("AUTHENTICATION Password" + authentication.getCredentials().toString());\n\n        BindAuthenticator bindAuth = new BindAuthenticator(ldapContextSource);\n        FilterBasedLdapUserSearch userSearch = new FilterBasedLdapUserSearch(\n                "", "(uid={0})",\n                ldapContextSource);\n        try{\n            bindAuth.setUserSearch(userSearch);\n            bindAuth.afterPropertiesSet();\n        } catch (Exception ex) {\n            java.util.logging.Logger.getLogger(CustomAuthenticationManager.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        provider = new LdapAuthenticationProvider(bindAuth);\n        provider.setUserDetailsContextMapper(new UserDetailsContextMapper() {\n            @Override\n            public UserDetails mapUserFromContext(DirContextOperations ctx, String username, Collection<? extends GrantedAuthority> clctn) {\n                Optional<User> isUser = userRepository.findOneWithAuthoritiesByLogin(username);\n                final User user = isUser.get();\n                Set<Authority> userAuthorities = user.getAuthorities();\n                Collection<GrantedAuthority> grantedAuthorities = new ArrayList<>();\n                for(Authority a: userAuthorities){\n                    GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(\n                            a.getName());\n                    grantedAuthorities.add(grantedAuthority);\n                }\n                  return new org.springframework.security.core.userdetails.User(\n                    username, "1" , grantedAuthorities);    \n            }\n\n            @Override\n            public void mapUserToContext(UserDetails ud, DirContextAdapter dca) {\n\n            }\n        });\n        return provider.authenticate(authentication);\n    }\n}\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"For some LDAP servers, the below authenticate implementation has been more successful, but requires more effort to map user authenticated users into the Users table and set authorities based on AD Groups"}),"\n",(0,i.jsxs)(t.li,{children:["Credit to ",(0,i.jsx)(t.a,{href:"https://github.com/eugenp/tutorials/tree/master/spring-ldap",children:"@eugenp"})," and ",(0,i.jsx)(t.a,{href:"http://code-addict.pl/active-directory-spring-security/",children:"Michael Kostewicz"})," for their stable reference implementations"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public Authentication authenticate(Authentication authentication) {\n    log.info("Authorizing active directory ldap ....");\n    \n    Hashtable<String, String> ldapEnv = new Hashtable<>(Map.of(\n        Context.INITIAL_CONTEXT_FACTORY, this.InitialContextFactory,\n        Context.PROVIDER_URL, this.ProviderUrl,\n        Context.SECURITY_AUTHENTICATION, this.SecurityAuthentication,\n        Context.SECURITY_PRINCIPAL, this.UserDomain + authentication.getPrincipal(),\n        Context.SECURITY_CREDENTIALS, authentication.getCredentials().toString(),\n        Context.SECURITY_PROTOCOL, "ssl"\n    ));\n\n    try {\n        ldapContext = new InitialDirContext(ldapEnv);\n        authentication.setAuthenticated(true);\n        log.info("Connected and authenticated.");\n        ldapContext.close();\n    } catch (Exception e) { \n        log.error(e.getMessage()); \n    }\n    return authentication;\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(96540);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);