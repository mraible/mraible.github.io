"use strict";(self.webpackChunkjhipster_website=self.webpackChunkjhipster_website||[]).push([[5308],{46376:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=t(74848),n=t(28453);const r={title:"Configure Redis leader follower(master-slave) replication",slug:"/tips/030_tip_redis_replication.html",last_update:{date:new Date("2020-03-23T12:30:00.000Z")}},a=void 0,l={id:"tips/tip_redis_replication",title:"Configure Redis leader follower(master-slave) replication",description:"Tip submitted by @zhx828",source:"@site/docs/tips/030_tip_redis_replication.mdx",sourceDirName:"tips",slug:"/tips/030_tip_redis_replication.html",permalink:"/tips/030_tip_redis_replication.html",draft:!1,unlisted:!1,editUrl:"https://github.com/jhipster/jhipster.github.io/tree/main/docs/tips/030_tip_redis_replication.mdx",tags:[],version:"current",lastUpdatedAt:15849666e5,sidebarPosition:30,frontMatter:{title:"Configure Redis leader follower(master-slave) replication",slug:"/tips/030_tip_redis_replication.html",last_update:{date:"2020-03-23T12:30:00.000Z"}},sidebar:"docsSidebar",previous:{title:"Improve developer experience if opening only front end in the IDE",permalink:"/tips/029_tip_frontend_only.html"},next:{title:"Running Protractor e2e tests within Intellij IDEA",permalink:"/tips/031_tip_e2e_intellij.html"}},p={},d=[{value:"Step 1",id:"step-1",level:2},{value:"Step 2",id:"step-2",level:2},{value:"Step 3",id:"step-3",level:2},{value:"Step 4",id:"step-4",level:2},{value:"Step 5",id:"step-5",level:2}];function o(e){const s={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.strong,{children:["Tip submitted by ",(0,i.jsx)(s.a,{href:"https://github.com/zhx828",children:"@zhx828"})]})}),"\n",(0,i.jsxs)(s.p,{children:["In the latest JHipster generator, it provides a redis cluster setting for production deployment. But oftentimes, that might be overkill for small projects. This document provides a solution to configure Redis leader follower (master-slave) replication. For more information about Redis Replication, please see ",(0,i.jsx)(s.a,{href:"https://redis.io/topics/replication",children:(0,i.jsx)(s.strong,{children:"here"})}),"."]}),"\n",(0,i.jsx)(s.p,{children:"The following changes are based on my own project set up. I assume you have modified your application properties to setup Redis password, so you can adjust your own accordingly."}),"\n",(0,i.jsx)(s.h2,{id:"step-1",children:"Step 1"}),"\n",(0,i.jsxs)(s.p,{children:["Add file ",(0,i.jsx)(s.code,{children:"RedisProperties.java"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"public class RedisProperties {\n    String type;\n    String password;\n    MasterSlaveRedisCache masterSlaveCache;\n    SingleRedisCache singleCache;\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public MasterSlaveRedisCache getMasterSlaveCache() {\n        return masterSlaveCache;\n    }\n\n    public void setMasterSlaveCache(MasterSlaveRedisCache masterSlaveCache) {\n        this.masterSlaveCache = masterSlaveCache;\n    }\n\n    public SingleRedisCache getSingleCache() {\n        return singleCache;\n    }\n\n    public void setSingleCache(SingleRedisCache singleCache) {\n        this.singleCache = singleCache;\n    }\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"step-2",children:"Step 2"}),"\n",(0,i.jsxs)(s.p,{children:["Add RedisProperties to ",(0,i.jsx)(s.code,{children:"ApplicationProperties.java"})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"public class ApplicationProperties {\n    ...\n\n    private RedisProperties redis;\n    \n    public RedisProperties getRedis() {\n        return redis;\n    }\n\n    public void setRedis(RedisProperties redis) {\n        this.redis = redis;\n    }\n    ...\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"step-3",children:"Step 3"}),"\n",(0,i.jsxs)(s.p,{children:["Update the file ",(0,i.jsx)(s.code,{children:"CacheConfiguration.java"}),", method ",(0,i.jsx)(s.code,{children:"jcacheConfiguration"}),". These changes have to be combined with the current cluster setup."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'if (applicationProperties.getRedis().getType().equals(RedisType.SINGLE.getType())) {\n    config.useSingleServer()\n        .setAddress(applicationProperties.getRedis().getSingleCache().getAddress())\n        .setPassword(applicationProperties.getRedis().getPassword());\n} else if (applicationProperties.getRedis().getType().equals(RedisType.MASTER_SLAVE.getType())) {\n    config.useMasterSlaveServers()\n        .setMasterAddress(applicationProperties.getRedis().getMasterSlaveCache().getMasterAddress())\n        .addSlaveAddress(applicationProperties.getRedis().getMasterSlaveCache().getSlaveAddress())\n        .setPassword(applicationProperties.getRedis().getPassword());\n} else {\n    throw new Exception("The redis type " + applicationProperties.getRedis().getType() + " is not supported. Only single and master-slave are supported.");\n}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"step-4",children:"Step 4"}),"\n",(0,i.jsxs)(s.p,{children:["Update ",(0,i.jsx)(s.code,{children:"application-dev.yml"})," to use single server"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"application:\n  profile: dev\n  redis:\n    type: 'single'\n    password: 'public-redis-password'\n    single-cache:\n      address: 'redis://localhost:6379'\n\n"})}),"\n",(0,i.jsx)(s.h2,{id:"step-5",children:"Step 5"}),"\n",(0,i.jsxs)(s.p,{children:["Update ",(0,i.jsx)(s.code,{children:"application-prod.yml"})," to use master-slave servers"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"application:\n  profile: prod\n  redis:\n    type: 'master-slave'\n    password: 'public-redis-password'\n    master-slave-cache:\n      master-address: 'redis://redis-master:6379'\n      slave-address: 'redis://redis-slave:6379'\n\n"})})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>l});var i=t(96540);const n={},r=i.createContext(n);function a(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);